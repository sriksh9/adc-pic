

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Jun 17 12:38:45 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26  0000                     
    27                           ; Version 1.41
    28                           ; Generated 25/01/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F45K22 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     _ADRES	set	4035
    62  0000                     _ADCON0bits	set	4034
    63  0000                     _ADCON0	set	4034
    64  0000                     _ADCON2	set	4032
    65  0000                     _ADCON1	set	4033
    66  0000                     _PORTB	set	3969
    67  0000                     _PORTD	set	3971
    68  0000                     _TRISB	set	3987
    69  0000                     _TRISD	set	3989
    70  0000                     _PORTBbits	set	3969
    71  0000                     _ADON	set	32272
    72                           
    73                           	psect	smallconst
    74  000600                     __psmallconst:
    75                           	opt stack 0
    76  000600  00                 	db	0
    77  000601                     STR_1:
    78  000601  58                 	db	88	;'X'
    79  000602  20                 	db	32
    80  000603  3A                 	db	58	;':'
    81  000604  20                 	db	32
    82  000605  00                 	db	0
    83  000606                     STR_2:
    84  000606  59                 	db	89	;'Y'
    85  000607  20                 	db	32
    86  000608  3A                 	db	58	;':'
    87  000609  20                 	db	32
    88  00060A  00                 	db	0
    89  00060B                     STR_3:
    90  00060B  5A                 	db	90	;'Z'
    91  00060C  20                 	db	32
    92  00060D  3A                 	db	58	;':'
    93  00060E  20                 	db	32
    94  00060F  00                 	db	0
    95                           
    96                           ; #config settings
    97  000610  00                 	db	0	; dummy byte at the end
    98  0000                     
    99                           	psect	cinit
   100  001174                     __pcinit:
   101                           	opt stack 0
   102  001174                     start_initialization:
   103                           	opt stack 0
   104  001174                     __initialization:
   105                           	opt stack 0
   106  001174                     end_of_initialization:
   107                           	opt stack 0
   108  001174                     __end_of__initialization:
   109                           	opt stack 0
   110  001174  0E00               	movlw	low (__Lmediumconst shr (0+16))
   111  001176  6EF8               	movwf	tblptru,c
   112  001178  0100               	movlb	0
   113  00117A  EFD4  F006         	goto	_main	;jump to C main() function
   114                           tblptru	equ	0xFF8
   115                           
   116                           	psect	cstackCOMRAM
   117  000001                     __pcstackCOMRAM:
   118                           	opt stack 0
   119  000001                     ?_adc_read:
   120                           	opt stack 0
   121  000001                     ?___lwdiv:
   122                           	opt stack 0
   123  000001                     ?___lwmod:
   124                           	opt stack 0
   125  000001                     goto_col@Col_Data:
   126                           	opt stack 0
   127  000001                     goto_row@row:
   128                           	opt stack 0
   129  000001                     glcd_write@data:
   130                           	opt stack 0
   131  000001                     ___lwdiv@dividend:
   132                           	opt stack 0
   133  000001                     ___lwmod@dividend:
   134                           	opt stack 0
   135                           
   136                           ; 2 bytes @ 0x0
   137  000001                     	ds	1
   138  000002                     goto_col@col:
   139                           	opt stack 0
   140  000002                     goto_row@Col_Data:
   141                           	opt stack 0
   142  000002                     glcd_text@text:
   143                           	opt stack 0
   144                           
   145                           ; 1 bytes @ 0x1
   146  000002                     	ds	1
   147  000003                     ??_adc_read:
   148  000003                     goto_xy@y:
   149                           	opt stack 0
   150  000003                     glcd_string@str:
   151                           	opt stack 0
   152  000003                     ___lwdiv@divisor:
   153                           	opt stack 0
   154  000003                     ___lwmod@divisor:
   155                           	opt stack 0
   156                           
   157                           ; 2 bytes @ 0x2
   158  000003                     	ds	1
   159  000004                     goto_xy@x:
   160                           	opt stack 0
   161  000004                     adc_read@channel:
   162                           	opt stack 0
   163                           
   164                           ; 1 bytes @ 0x3
   165  000004                     	ds	1
   166  000005                     ??_glcd_string:
   167  000005                     glcd_clear_line@ln:
   168                           	opt stack 0
   169  000005                     ___lwmod@counter:
   170                           	opt stack 0
   171  000005                     ___lwdiv@quotient:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x4
   175  000005                     	ds	1
   176  000006                     glcd_clear_line@i:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x5
   180  000006                     	ds	1
   181  000007                     glcd_string@i:
   182                           	opt stack 0
   183  000007                     ___lwdiv@counter:
   184                           	opt stack 0
   185                           
   186                           ; 1 bytes @ 0x6
   187  000007                     	ds	1
   188  000008                     glcd_clear@m:
   189                           	opt stack 0
   190  000008                     glcd_num@num:
   191                           	opt stack 0
   192                           
   193                           ; 2 bytes @ 0x7
   194  000008                     	ds	2
   195  00000A                     ??_glcd_num:
   196                           
   197                           ; 1 bytes @ 0x9
   198  00000A                     	ds	2
   199  00000C                     glcd_num@number:
   200                           	opt stack 0
   201                           
   202                           ; 16 bytes @ 0xB
   203  00000C                     	ds	16
   204  00001C                     glcd_num@i:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0x1B
   208  00001C                     	ds	1
   209  00001D                     glcd_num@j:
   210                           	opt stack 0
   211                           
   212                           ; 1 bytes @ 0x1C
   213  00001D                     	ds	1
   214  00001E                     ??_main:
   215                           
   216                           ; 1 bytes @ 0x1D
   217  00001E                     	ds	2
   218  000020                     main@x:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x1F
   222  000020                     	ds	2
   223  000022                     main@y:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x21
   227  000022                     	ds	2
   228  000024                     main@z:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x23
   232  000024                     	ds	2
   233                           tblptru	equ	0xFF8
   234                           
   235 ;;
   236 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   237 ;;
   238 ;; *************** function _main *****************
   239 ;; Defined at:
   240 ;;		line 16 in file "acclero.c"
   241 ;; Parameters:    Size  Location     Type
   242 ;;		None
   243 ;; Auto vars:     Size  Location     Type
   244 ;;  z               2   35[COMRAM] unsigned int 
   245 ;;  y               2   33[COMRAM] unsigned int 
   246 ;;  x               2   31[COMRAM] unsigned int 
   247 ;; Return value:  Size  Location     Type
   248 ;;                  1    wreg      void 
   249 ;; Registers used:
   250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   251 ;; Tracked objects:
   252 ;;		On entry : 0/0
   253 ;;		On exit  : 0/0
   254 ;;		Unchanged: 0/0
   255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   256 ;;      Params:         0       0       0       0       0       0       0
   257 ;;      Locals:         6       0       0       0       0       0       0
   258 ;;      Temps:          2       0       0       0       0       0       0
   259 ;;      Totals:         8       0       0       0       0       0       0
   260 ;;Total ram usage:        8 bytes
   261 ;; Hardware stack levels required when called:    5
   262 ;; This function calls:
   263 ;;		_adc_init
   264 ;;		_adc_read
   265 ;;		_glcd_clear
   266 ;;		_glcd_num
   267 ;;		_glcd_on
   268 ;;		_glcd_string
   269 ;;		_goto_xy
   270 ;; This function is called by:
   271 ;;		Startup code after reset
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275                           	psect	text0
   276  000DA8                     __ptext0:
   277                           	opt stack 0
   278  000DA8                     _main:
   279                           	opt stack 26
   280                           
   281                           ;acclero.c: 17: unsigned int x, y, z;
   282                           ;acclero.c: 18: glcd_on();
   283                           
   284                           ;incstack = 0
   285  000DA8  EC6A  F008         	call	_glcd_on	;wreg free
   286                           
   287                           ;acclero.c: 19: glcd_clear();
   288  000DAC  EC7E  F008         	call	_glcd_clear	;wreg free
   289                           
   290                           ;acclero.c: 20: adc_init();
   291  000DB0  ECBF  F008         	call	_adc_init	;wreg free
   292  000DB4                     l182:
   293                           
   294                           ;acclero.c: 22: {
   295                           ;acclero.c: 23: glcd_clear();
   296  000DB4  EC7E  F008         	call	_glcd_clear	;wreg free
   297                           
   298                           ;acclero.c: 24: x = adc_read(0);
   299  000DB8  0E00               	movlw	0
   300  000DBA  EC11  F008         	call	_adc_read
   301  000DBE  C001  F020         	movff	?_adc_read,main@x
   302  000DC2  C002  F021         	movff	?_adc_read+1,main@x+1
   303                           
   304                           ;acclero.c: 25: y = adc_read(1);
   305  000DC6  0E01               	movlw	1
   306  000DC8  EC11  F008         	call	_adc_read
   307  000DCC  C001  F022         	movff	?_adc_read,main@y
   308  000DD0  C002  F023         	movff	?_adc_read+1,main@y+1
   309                           
   310                           ;acclero.c: 26: z = adc_read(2);
   311  000DD4  0E02               	movlw	2
   312  000DD6  EC11  F008         	call	_adc_read
   313  000DDA  C001  F024         	movff	?_adc_read,main@z
   314  000DDE  C002  F025         	movff	?_adc_read+1,main@z+1
   315                           
   316                           ;acclero.c: 27: goto_xy(0,0);
   317  000DE2  0E00               	movlw	0
   318  000DE4  6E03               	movwf	goto_xy@y,c
   319  000DE6  0E00               	movlw	0
   320  000DE8  ECB2  F008         	call	_goto_xy
   321                           
   322                           ;acclero.c: 28: glcd_string("X : ");
   323  000DEC  0E01               	movlw	low STR_1
   324  000DEE  6E03               	movwf	glcd_string@str,c
   325  000DF0  0E06               	movlw	high STR_1
   326  000DF2  6E04               	movwf	glcd_string@str+1,c
   327  000DF4  EC9D  F007         	call	_glcd_string	;wreg free
   328                           
   329                           ;acclero.c: 29: goto_xy(70,0);
   330  000DF8  0E00               	movlw	0
   331  000DFA  6E03               	movwf	goto_xy@y,c
   332  000DFC  0E46               	movlw	70
   333  000DFE  ECB2  F008         	call	_goto_xy
   334                           
   335                           ;acclero.c: 30: glcd_num(x);
   336  000E02  C020  F008         	movff	main@x,glcd_num@num
   337  000E06  C021  F009         	movff	main@x+1,glcd_num@num+1
   338  000E0A  EC40  F007         	call	_glcd_num	;wreg free
   339                           
   340                           ;acclero.c: 32: goto_xy(0,10);
   341  000E0E  0E0A               	movlw	10
   342  000E10  6E03               	movwf	goto_xy@y,c
   343  000E12  0E00               	movlw	0
   344  000E14  ECB2  F008         	call	_goto_xy
   345                           
   346                           ;acclero.c: 33: glcd_string("Y : ");
   347  000E18  0E06               	movlw	low STR_2
   348  000E1A  6E03               	movwf	glcd_string@str,c
   349  000E1C  0E06               	movlw	high STR_2
   350  000E1E  6E04               	movwf	glcd_string@str+1,c
   351  000E20  EC9D  F007         	call	_glcd_string	;wreg free
   352                           
   353                           ;acclero.c: 34: goto_xy(70,10);
   354  000E24  0E0A               	movlw	10
   355  000E26  6E03               	movwf	goto_xy@y,c
   356  000E28  0E46               	movlw	70
   357  000E2A  ECB2  F008         	call	_goto_xy
   358                           
   359                           ;acclero.c: 35: glcd_num(y);
   360  000E2E  C022  F008         	movff	main@y,glcd_num@num
   361  000E32  C023  F009         	movff	main@y+1,glcd_num@num+1
   362  000E36  EC40  F007         	call	_glcd_num	;wreg free
   363                           
   364                           ;acclero.c: 37: goto_xy(0,20);
   365  000E3A  0E14               	movlw	20
   366  000E3C  6E03               	movwf	goto_xy@y,c
   367  000E3E  0E00               	movlw	0
   368  000E40  ECB2  F008         	call	_goto_xy
   369                           
   370                           ;acclero.c: 38: glcd_string("Z : ");
   371  000E44  0E0B               	movlw	low STR_3
   372  000E46  6E03               	movwf	glcd_string@str,c
   373  000E48  0E06               	movlw	high STR_3
   374  000E4A  6E04               	movwf	glcd_string@str+1,c
   375  000E4C  EC9D  F007         	call	_glcd_string	;wreg free
   376                           
   377                           ;acclero.c: 39: goto_xy(70,20);
   378  000E50  0E14               	movlw	20
   379  000E52  6E03               	movwf	goto_xy@y,c
   380  000E54  0E46               	movlw	70
   381  000E56  ECB2  F008         	call	_goto_xy
   382                           
   383                           ;acclero.c: 40: glcd_num(z);
   384  000E5A  C024  F008         	movff	main@z,glcd_num@num
   385  000E5E  C025  F009         	movff	main@z+1,glcd_num@num+1
   386  000E62  EC40  F007         	call	_glcd_num	;wreg free
   387                           
   388                           ;acclero.c: 42: _delay((unsigned long)((100)*(16000000/4000.0)));
   389  000E66  0E03               	movlw	3
   390  000E68  6E1F               	movwf	(??_main+1)& (0+255),c
   391  000E6A  0E08               	movlw	8
   392  000E6C  6E1E               	movwf	??_main& (0+255),c
   393  000E6E  0E77               	movlw	119
   394  000E70                     u727:
   395  000E70  2EE8               	decfsz	wreg,f,c
   396  000E72  D7FE               	bra	u727
   397  000E74  2E1E               	decfsz	??_main& (0+255),f,c
   398  000E76  D7FC               	bra	u727
   399  000E78  2E1F               	decfsz	(??_main+1)& (0+255),f,c
   400  000E7A  D7FA               	bra	u727
   401  000E7C  F000               	nop	
   402  000E7E  D79A               	goto	l182
   403  000E80                     __end_of_main:
   404                           	opt stack 0
   405                           tblptru	equ	0xFF8
   406                           wreg	equ	0xFE8
   407                           
   408 ;; *************** function _glcd_string *****************
   409 ;; Defined at:
   410 ;;		line 625 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   411 ;; Parameters:    Size  Location     Type
   412 ;;  str             2    2[COMRAM] PTR unsigned char 
   413 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
   414 ;; Auto vars:     Size  Location     Type
   415 ;;  i               1    6[COMRAM] unsigned char 
   416 ;; Return value:  Size  Location     Type
   417 ;;                  1    wreg      void 
   418 ;; Registers used:
   419 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   420 ;; Tracked objects:
   421 ;;		On entry : 0/0
   422 ;;		On exit  : 0/0
   423 ;;		Unchanged: 0/0
   424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   425 ;;      Params:         2       0       0       0       0       0       0
   426 ;;      Locals:         1       0       0       0       0       0       0
   427 ;;      Temps:          2       0       0       0       0       0       0
   428 ;;      Totals:         5       0       0       0       0       0       0
   429 ;;Total ram usage:        5 bytes
   430 ;; Hardware stack levels used:    1
   431 ;; Hardware stack levels required when called:    3
   432 ;; This function calls:
   433 ;;		_glcd_text
   434 ;; This function is called by:
   435 ;;		_main
   436 ;; This function uses a non-reentrant model
   437 ;;
   438                           
   439                           	psect	text1
   440  000F3A                     __ptext1:
   441                           	opt stack 0
   442  000F3A                     _glcd_string:
   443                           	opt stack 27
   444                           
   445                           ;glcd.h: 627: unsigned char i = 0;
   446                           
   447                           ;incstack = 0
   448  000F3A  0E00               	movlw	0
   449  000F3C  6E07               	movwf	glcd_string@i,c
   450                           
   451                           ;glcd.h: 628: while(str[i]!='\0')
   452  000F3E  D013               	goto	l1369
   453  000F40                     l1365:
   454                           
   455                           ;glcd.h: 629: {
   456                           ;glcd.h: 630: glcd_text(str[i]);
   457  000F40  5007               	movf	glcd_string@i,w,c
   458  000F42  0D01               	mullw	1
   459  000F44  C003  F005         	movff	glcd_string@str,??_glcd_string
   460  000F48  C004  F006         	movff	glcd_string@str+1,??_glcd_string+1
   461  000F4C  50F3               	movf	prodl,w,c
   462  000F4E  2605               	addwf	??_glcd_string,f,c
   463  000F50  50F4               	movf	prodh,w,c
   464  000F52  2206               	addwfc	??_glcd_string+1,f,c
   465  000F54  C005  FFF6         	movff	??_glcd_string,tblptrl
   466  000F58  C006  FFF7         	movff	??_glcd_string+1,tblptrh
   467  000F5C                     	if	0	;tblptru may be non-zero
   468  000F5C                     	endif
   469  000F5C                     	if	0	;tblptru may be non-zero
   470  000F5C                     	endif
   471  000F5C  0008               	tblrd		*
   472  000F5E  50F5               	movf	tablat,w,c
   473  000F60  EC09  F003         	call	_glcd_text
   474                           
   475                           ;glcd.h: 631: i++;
   476  000F64  2A07               	incf	glcd_string@i,f,c
   477  000F66                     l1369:
   478  000F66  5007               	movf	glcd_string@i,w,c
   479  000F68  0D01               	mullw	1
   480  000F6A  C003  F005         	movff	glcd_string@str,??_glcd_string
   481  000F6E  C004  F006         	movff	glcd_string@str+1,??_glcd_string+1
   482  000F72  50F3               	movf	prodl,w,c
   483  000F74  2605               	addwf	??_glcd_string,f,c
   484  000F76  50F4               	movf	prodh,w,c
   485  000F78  2206               	addwfc	??_glcd_string+1,f,c
   486  000F7A  C005  FFF6         	movff	??_glcd_string,tblptrl
   487  000F7E  C006  FFF7         	movff	??_glcd_string+1,tblptrh
   488  000F82                     	if	0	;tblptru may be non-zero
   489  000F82                     	endif
   490  000F82                     	if	0	;tblptru may be non-zero
   491  000F82                     	endif
   492  000F82  0008               	tblrd		*
   493  000F84  50F5               	movf	tablat,w,c
   494  000F86  0900               	iorlw	0
   495  000F88  B4D8               	btfsc	status,2,c
   496  000F8A  0012               	return	
   497  000F8C  D7D9               	goto	l1365
   498  000F8E                     __end_of_glcd_string:
   499                           	opt stack 0
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           prodh	equ	0xFF4
   505                           prodl	equ	0xFF3
   506                           wreg	equ	0xFE8
   507                           status	equ	0xFD8
   508                           
   509 ;; *************** function _glcd_on *****************
   510 ;; Defined at:
   511 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   512 ;; Parameters:    Size  Location     Type
   513 ;;		None
   514 ;; Auto vars:     Size  Location     Type
   515 ;;		None
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, status,2, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   525 ;;      Params:         0       0       0       0       0       0       0
   526 ;;      Locals:         0       0       0       0       0       0       0
   527 ;;      Temps:          0       0       0       0       0       0       0
   528 ;;      Totals:         0       0       0       0       0       0       0
   529 ;;Total ram usage:        0 bytes
   530 ;; Hardware stack levels used:    1
   531 ;; Hardware stack levels required when called:    1
   532 ;; This function calls:
   533 ;;		_enable_pulse
   534 ;; This function is called by:
   535 ;;		_main
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           	psect	text2
   540  0010D4                     __ptext2:
   541                           	opt stack 0
   542  0010D4                     _glcd_on:
   543                           	opt stack 29
   544                           
   545                           ;glcd.h: 65: TRISD = 0x00;
   546                           
   547                           ;incstack = 0
   548  0010D4  0E00               	movlw	0
   549  0010D6  6E95               	movwf	3989,c	;volatile
   550                           
   551                           ;glcd.h: 66: TRISB = 0x00;
   552  0010D8  0E00               	movlw	0
   553  0010DA  6E93               	movwf	3987,c	;volatile
   554                           
   555                           ;glcd.h: 67: PORTD = 0x00;
   556  0010DC  0E00               	movlw	0
   557  0010DE  6E83               	movwf	3971,c	;volatile
   558                           
   559                           ;glcd.h: 68: PORTB = 0x00;
   560  0010E0  0E00               	movlw	0
   561  0010E2  6E81               	movwf	3969,c	;volatile
   562                           
   563                           ;glcd.h: 69: PORTBbits.RB3 = 1;
   564  0010E4  8681               	bsf	3969,3,c	;volatile
   565                           
   566                           ;glcd.h: 70: PORTBbits.RB4 = 1;
   567  0010E6  8881               	bsf	3969,4,c	;volatile
   568                           
   569                           ;glcd.h: 71: PORTBbits.RB5 = 1;
   570  0010E8  8A81               	bsf	3969,5,c	;volatile
   571                           
   572                           ;glcd.h: 73: PORTBbits.RB4 = 1;
   573  0010EA  8881               	bsf	3969,4,c	;volatile
   574                           
   575                           ;glcd.h: 74: PORTBbits.RB5 = 1;
   576  0010EC  8A81               	bsf	3969,5,c	;volatile
   577                           
   578                           ;glcd.h: 75: PORTBbits.RB0 = 0;
   579  0010EE  9081               	bcf	3969,0,c	;volatile
   580                           
   581                           ;glcd.h: 76: PORTBbits.RB1 = 0;
   582  0010F0  9281               	bcf	3969,1,c	;volatile
   583                           
   584                           ;glcd.h: 77: PORTD = 0x3F;
   585  0010F2  0E3F               	movlw	63
   586  0010F4  6E83               	movwf	3971,c	;volatile
   587                           
   588                           ;glcd.h: 78: enable_pulse();
   589  0010F6  ECA7  F008         	call	_enable_pulse	;wreg free
   590  0010FA  0012               	return		;funcret
   591  0010FC                     __end_of_glcd_on:
   592                           	opt stack 0
   593                           tblptru	equ	0xFF8
   594                           tblptrh	equ	0xFF7
   595                           tblptrl	equ	0xFF6
   596                           tablat	equ	0xFF5
   597                           prodh	equ	0xFF4
   598                           prodl	equ	0xFF3
   599                           wreg	equ	0xFE8
   600                           status	equ	0xFD8
   601                           
   602 ;; *************** function _glcd_num *****************
   603 ;; Defined at:
   604 ;;		line 603 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   605 ;; Parameters:    Size  Location     Type
   606 ;;  num             2    7[COMRAM] unsigned int 
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  number         16   11[COMRAM] unsigned char [16]
   609 ;;  j               1   28[COMRAM] unsigned char 
   610 ;;  i               1   27[COMRAM] unsigned char 
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   620 ;;      Params:         2       0       0       0       0       0       0
   621 ;;      Locals:        18       0       0       0       0       0       0
   622 ;;      Temps:          2       0       0       0       0       0       0
   623 ;;      Totals:        22       0       0       0       0       0       0
   624 ;;Total ram usage:       22 bytes
   625 ;; Hardware stack levels used:    1
   626 ;; Hardware stack levels required when called:    3
   627 ;; This function calls:
   628 ;;		___lwdiv
   629 ;;		___lwmod
   630 ;;		_glcd_text
   631 ;; This function is called by:
   632 ;;		_main
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text3
   637  000E80                     __ptext3:
   638                           	opt stack 0
   639  000E80                     _glcd_num:
   640                           	opt stack 27
   641                           
   642                           ;glcd.h: 605: unsigned char j, i = 1;
   643                           
   644                           ;incstack = 0
   645  000E80  0E01               	movlw	1
   646  000E82  6E1C               	movwf	glcd_num@i,c
   647                           
   648                           ;glcd.h: 606: unsigned char number[16];
   649                           ;glcd.h: 607: for(j=0;j<16;j++)
   650  000E84  0E00               	movlw	0
   651  000E86  6E1D               	movwf	glcd_num@j,c
   652  000E88                     l1331:
   653  000E88  0E0F               	movlw	15
   654  000E8A  641D               	cpfsgt	glcd_num@j,c
   655  000E8C  D001               	goto	l1335
   656  000E8E  D02F               	goto	l1347
   657  000E90                     l1335:
   658                           
   659                           ;glcd.h: 608: number[j] = 0;
   660  000E90  501D               	movf	glcd_num@j,w,c
   661  000E92  0D01               	mullw	1
   662  000E94  0E0C               	movlw	low glcd_num@number
   663  000E96  24F3               	addwf	prodl,w,c
   664  000E98  6ED9               	movwf	fsr2l,c
   665  000E9A  0E00               	movlw	high glcd_num@number
   666  000E9C  20F4               	addwfc	prodh,w,c
   667  000E9E  6EDA               	movwf	fsr2h,c
   668  000EA0  0E00               	movlw	0
   669  000EA2  6EDF               	movwf	indf2,c
   670  000EA4  2A1D               	incf	glcd_num@j,f,c
   671  000EA6  D7F0               	goto	l1331
   672  000EA8                     l1341:
   673                           
   674                           ;glcd.h: 611: {
   675                           ;glcd.h: 612: number[i] = num%10;
   676  000EA8  501C               	movf	glcd_num@i,w,c
   677  000EAA  0D01               	mullw	1
   678  000EAC  0E0C               	movlw	low glcd_num@number
   679  000EAE  24F3               	addwf	prodl,w,c
   680  000EB0  6ED9               	movwf	fsr2l,c
   681  000EB2  0E00               	movlw	high glcd_num@number
   682  000EB4  20F4               	addwfc	prodh,w,c
   683  000EB6  6EDA               	movwf	fsr2h,c
   684  000EB8  C008  F001         	movff	glcd_num@num,___lwmod@dividend
   685  000EBC  C009  F002         	movff	glcd_num@num+1,___lwmod@dividend+1
   686  000EC0  0E00               	movlw	0
   687  000EC2  6E04               	movwf	___lwmod@divisor+1,c
   688  000EC4  0E0A               	movlw	10
   689  000EC6  6E03               	movwf	___lwmod@divisor,c
   690  000EC8  ECF0  F007         	call	___lwmod	;wreg free
   691  000ECC  5001               	movf	?___lwmod,w,c
   692  000ECE  6EDF               	movwf	indf2,c
   693                           
   694                           ;glcd.h: 613: num = num/10;
   695  000ED0  C008  F001         	movff	glcd_num@num,___lwdiv@dividend
   696  000ED4  C009  F002         	movff	glcd_num@num+1,___lwdiv@dividend+1
   697  000ED8  0E00               	movlw	0
   698  000EDA  6E04               	movwf	___lwdiv@divisor+1,c
   699  000EDC  0E0A               	movlw	10
   700  000EDE  6E03               	movwf	___lwdiv@divisor,c
   701  000EE0  ECC7  F007         	call	___lwdiv	;wreg free
   702  000EE4  C001  F008         	movff	?___lwdiv,glcd_num@num
   703  000EE8  C002  F009         	movff	?___lwdiv+1,glcd_num@num+1
   704                           
   705                           ;glcd.h: 614: i++;
   706  000EEC  2A1C               	incf	glcd_num@i,f,c
   707  000EEE                     l1347:
   708  000EEE  5008               	movf	glcd_num@num,w,c
   709  000EF0  1009               	iorwf	glcd_num@num+1,w,c
   710  000EF2  A4D8               	btfss	status,2,c
   711  000EF4  D7D9               	goto	l1341
   712                           
   713                           ;glcd.h: 615: }
   714                           ;glcd.h: 616: number[i+1] = 0;
   715  000EF6  501C               	movf	glcd_num@i,w,c
   716  000EF8  6E0A               	movwf	??_glcd_num& (0+255),c
   717  000EFA  6A0B               	clrf	(??_glcd_num+1)& (0+255),c
   718  000EFC  0E01               	movlw	1
   719  000EFE  260A               	addwf	??_glcd_num,f,c
   720  000F00  0E00               	movlw	0
   721  000F02  220B               	addwfc	??_glcd_num+1,f,c
   722  000F04  0E0C               	movlw	low glcd_num@number
   723  000F06  240A               	addwf	??_glcd_num,w,c
   724  000F08  6ED9               	movwf	fsr2l,c
   725  000F0A  0E00               	movlw	high glcd_num@number
   726  000F0C  200B               	addwfc	??_glcd_num+1,w,c
   727  000F0E  6EDA               	movwf	fsr2h,c
   728  000F10  0E00               	movlw	0
   729  000F12  6EDF               	movwf	indf2,c
   730                           
   731                           ;glcd.h: 617: for(j=i;j>0;j--)
   732  000F14  C01C  F01D         	movff	glcd_num@i,glcd_num@j
   733  000F18                     l1353:
   734  000F18  501D               	movf	glcd_num@j,w,c
   735  000F1A  B4D8               	btfsc	status,2,c
   736  000F1C  0012               	return	
   737                           
   738                           ;glcd.h: 618: {
   739                           ;glcd.h: 619: glcd_text(number[j]+48);
   740  000F1E  501D               	movf	glcd_num@j,w,c
   741  000F20  0D01               	mullw	1
   742  000F22  0E0C               	movlw	low glcd_num@number
   743  000F24  24F3               	addwf	prodl,w,c
   744  000F26  6ED9               	movwf	fsr2l,c
   745  000F28  0E00               	movlw	high glcd_num@number
   746  000F2A  20F4               	addwfc	prodh,w,c
   747  000F2C  6EDA               	movwf	fsr2h,c
   748  000F2E  50DF               	movf	indf2,w,c
   749  000F30  0F30               	addlw	48
   750  000F32  EC09  F003         	call	_glcd_text
   751  000F36  061D               	decf	glcd_num@j,f,c
   752  000F38  D7EF               	goto	l1353
   753  000F3A                     __end_of_glcd_num:
   754                           	opt stack 0
   755                           tblptru	equ	0xFF8
   756                           tblptrh	equ	0xFF7
   757                           tblptrl	equ	0xFF6
   758                           tablat	equ	0xFF5
   759                           prodh	equ	0xFF4
   760                           prodl	equ	0xFF3
   761                           wreg	equ	0xFE8
   762                           indf2	equ	0xFDF
   763                           fsr2h	equ	0xFDA
   764                           fsr2l	equ	0xFD9
   765                           status	equ	0xFD8
   766                           
   767 ;; *************** function _glcd_text *****************
   768 ;; Defined at:
   769 ;;		line 201 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
   770 ;; Parameters:    Size  Location     Type
   771 ;;  text            1    wreg     unsigned char 
   772 ;; Auto vars:     Size  Location     Type
   773 ;;  text            1    1[COMRAM] unsigned char 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : 0/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   783 ;;      Params:         0       0       0       0       0       0       0
   784 ;;      Locals:         1       0       0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0
   786 ;;      Totals:         1       0       0       0       0       0       0
   787 ;;Total ram usage:        1 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    2
   790 ;; This function calls:
   791 ;;		_glcd_write
   792 ;; This function is called by:
   793 ;;		_glcd_num
   794 ;;		_glcd_string
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text4
   799  000612                     __ptext4:
   800                           	opt stack 0
   801  000612                     _glcd_text:
   802                           	opt stack 27
   803                           
   804                           ;incstack = 0
   805                           ;glcd_text@text stored from wreg
   806  000612  6E02               	movwf	glcd_text@text,c
   807                           
   808                           ;glcd.h: 203: switch (text)
   809  000614  D34F               	goto	l983
   810  000616                     l901:
   811                           
   812                           ;glcd.h: 207: glcd_write(0x00);
   813  000616  0E00               	movlw	0
   814  000618  EC9B  F008         	call	_glcd_write
   815                           
   816                           ;glcd.h: 208: glcd_write(0x7E);
   817  00061C  0E7E               	movlw	126
   818  00061E  EC9B  F008         	call	_glcd_write
   819                           
   820                           ;glcd.h: 209: glcd_write(0x09);
   821  000622  0E09               	movlw	9
   822  000624  EC9B  F008         	call	_glcd_write
   823                           
   824                           ;glcd.h: 210: glcd_write(0x09);
   825  000628  0E09               	movlw	9
   826  00062A  EC9B  F008         	call	_glcd_write
   827                           
   828                           ;glcd.h: 211: glcd_write(0x09);
   829  00062E  0E09               	movlw	9
   830  000630  EC9B  F008         	call	_glcd_write
   831                           
   832                           ;glcd.h: 212: glcd_write(0x7E);
   833  000634  0E7E               	movlw	126
   834  000636  EC9B  F008         	call	_glcd_write
   835                           
   836                           ;glcd.h: 213: glcd_write(0x00);
   837  00063A  0E00               	movlw	0
   838  00063C  EC9B  F008         	call	_glcd_write
   839                           
   840                           ;glcd.h: 214: break;
   841  000640  0012               	return	
   842  000642                     l903:
   843                           
   844                           ;glcd.h: 217: glcd_write(0x00);
   845  000642  0E00               	movlw	0
   846  000644  EC9B  F008         	call	_glcd_write
   847                           
   848                           ;glcd.h: 218: glcd_write(0x7F);
   849  000648  0E7F               	movlw	127
   850  00064A  EC9B  F008         	call	_glcd_write
   851                           
   852                           ;glcd.h: 219: glcd_write(0x49);
   853  00064E  0E49               	movlw	73
   854  000650  EC9B  F008         	call	_glcd_write
   855                           
   856                           ;glcd.h: 220: glcd_write(0x49);
   857  000654  0E49               	movlw	73
   858  000656  EC9B  F008         	call	_glcd_write
   859                           
   860                           ;glcd.h: 221: glcd_write(0x49);
   861  00065A  0E49               	movlw	73
   862  00065C  EC9B  F008         	call	_glcd_write
   863                           
   864                           ;glcd.h: 222: glcd_write(0x36);
   865  000660  0E36               	movlw	54
   866  000662  EC9B  F008         	call	_glcd_write
   867                           
   868                           ;glcd.h: 223: glcd_write(0x00);
   869  000666  0E00               	movlw	0
   870  000668  EC9B  F008         	call	_glcd_write
   871                           
   872                           ;glcd.h: 224: break;
   873  00066C  0012               	return	
   874  00066E                     l905:
   875                           
   876                           ;glcd.h: 227: glcd_write(0x00);
   877  00066E  0E00               	movlw	0
   878  000670  EC9B  F008         	call	_glcd_write
   879                           
   880                           ;glcd.h: 228: glcd_write(0x3E);
   881  000674  0E3E               	movlw	62
   882  000676  EC9B  F008         	call	_glcd_write
   883                           
   884                           ;glcd.h: 229: glcd_write(0x41);
   885  00067A  0E41               	movlw	65
   886  00067C  EC9B  F008         	call	_glcd_write
   887                           
   888                           ;glcd.h: 230: glcd_write(0x41);
   889  000680  0E41               	movlw	65
   890  000682  EC9B  F008         	call	_glcd_write
   891                           
   892                           ;glcd.h: 231: glcd_write(0x41);
   893  000686  0E41               	movlw	65
   894  000688  EC9B  F008         	call	_glcd_write
   895                           
   896                           ;glcd.h: 232: glcd_write(0x22);
   897  00068C  0E22               	movlw	34
   898  00068E  EC9B  F008         	call	_glcd_write
   899                           
   900                           ;glcd.h: 233: glcd_write(0x00);
   901  000692  0E00               	movlw	0
   902  000694  EC9B  F008         	call	_glcd_write
   903                           
   904                           ;glcd.h: 234: break;
   905  000698  0012               	return	
   906  00069A                     l907:
   907                           
   908                           ;glcd.h: 237: glcd_write(0x00);
   909  00069A  0E00               	movlw	0
   910  00069C  EC9B  F008         	call	_glcd_write
   911                           
   912                           ;glcd.h: 238: glcd_write(0x7F);
   913  0006A0  0E7F               	movlw	127
   914  0006A2  EC9B  F008         	call	_glcd_write
   915                           
   916                           ;glcd.h: 239: glcd_write(0x41);
   917  0006A6  0E41               	movlw	65
   918  0006A8  EC9B  F008         	call	_glcd_write
   919                           
   920                           ;glcd.h: 240: glcd_write(0x41);
   921  0006AC  0E41               	movlw	65
   922  0006AE  EC9B  F008         	call	_glcd_write
   923                           
   924                           ;glcd.h: 241: glcd_write(0x41);
   925  0006B2  0E41               	movlw	65
   926  0006B4  EC9B  F008         	call	_glcd_write
   927                           
   928                           ;glcd.h: 242: glcd_write(0x3E);
   929  0006B8  0E3E               	movlw	62
   930  0006BA  EC9B  F008         	call	_glcd_write
   931                           
   932                           ;glcd.h: 243: glcd_write(0x00);
   933  0006BE  0E00               	movlw	0
   934  0006C0  EC9B  F008         	call	_glcd_write
   935                           
   936                           ;glcd.h: 244: break;
   937  0006C4  0012               	return	
   938  0006C6                     l909:
   939                           
   940                           ;glcd.h: 247: glcd_write(0x00);
   941  0006C6  0E00               	movlw	0
   942  0006C8  EC9B  F008         	call	_glcd_write
   943                           
   944                           ;glcd.h: 248: glcd_write(0x7F);
   945  0006CC  0E7F               	movlw	127
   946  0006CE  EC9B  F008         	call	_glcd_write
   947                           
   948                           ;glcd.h: 249: glcd_write(0x49);
   949  0006D2  0E49               	movlw	73
   950  0006D4  EC9B  F008         	call	_glcd_write
   951                           
   952                           ;glcd.h: 250: glcd_write(0x49);
   953  0006D8  0E49               	movlw	73
   954  0006DA  EC9B  F008         	call	_glcd_write
   955                           
   956                           ;glcd.h: 251: glcd_write(0x49);
   957  0006DE  0E49               	movlw	73
   958  0006E0  EC9B  F008         	call	_glcd_write
   959                           
   960                           ;glcd.h: 252: glcd_write(0x41);
   961  0006E4  0E41               	movlw	65
   962  0006E6  EC9B  F008         	call	_glcd_write
   963                           
   964                           ;glcd.h: 253: glcd_write(0x00);
   965  0006EA  0E00               	movlw	0
   966  0006EC  EC9B  F008         	call	_glcd_write
   967                           
   968                           ;glcd.h: 254: break;
   969  0006F0  0012               	return	
   970  0006F2                     l911:
   971                           
   972                           ;glcd.h: 257: glcd_write(0x00);
   973  0006F2  0E00               	movlw	0
   974  0006F4  EC9B  F008         	call	_glcd_write
   975                           
   976                           ;glcd.h: 258: glcd_write(0x7F);
   977  0006F8  0E7F               	movlw	127
   978  0006FA  EC9B  F008         	call	_glcd_write
   979                           
   980                           ;glcd.h: 259: glcd_write(0x09);
   981  0006FE  0E09               	movlw	9
   982  000700  EC9B  F008         	call	_glcd_write
   983                           
   984                           ;glcd.h: 260: glcd_write(0x09);
   985  000704  0E09               	movlw	9
   986  000706  EC9B  F008         	call	_glcd_write
   987                           
   988                           ;glcd.h: 261: glcd_write(0x09);
   989  00070A  0E09               	movlw	9
   990  00070C  EC9B  F008         	call	_glcd_write
   991                           
   992                           ;glcd.h: 262: glcd_write(0x01);
   993  000710  0E01               	movlw	1
   994  000712  EC9B  F008         	call	_glcd_write
   995                           
   996                           ;glcd.h: 263: glcd_write(0x00);
   997  000716  0E00               	movlw	0
   998  000718  EC9B  F008         	call	_glcd_write
   999                           
  1000                           ;glcd.h: 264: break;
  1001  00071C  0012               	return	
  1002  00071E                     l913:
  1003                           
  1004                           ;glcd.h: 267: glcd_write(0x00);
  1005  00071E  0E00               	movlw	0
  1006  000720  EC9B  F008         	call	_glcd_write
  1007                           
  1008                           ;glcd.h: 268: glcd_write(0x3E);
  1009  000724  0E3E               	movlw	62
  1010  000726  EC9B  F008         	call	_glcd_write
  1011                           
  1012                           ;glcd.h: 269: glcd_write(0x41);
  1013  00072A  0E41               	movlw	65
  1014  00072C  EC9B  F008         	call	_glcd_write
  1015                           
  1016                           ;glcd.h: 270: glcd_write(0x41);
  1017  000730  0E41               	movlw	65
  1018  000732  EC9B  F008         	call	_glcd_write
  1019                           
  1020                           ;glcd.h: 271: glcd_write(0x49);
  1021  000736  0E49               	movlw	73
  1022  000738  EC9B  F008         	call	_glcd_write
  1023                           
  1024                           ;glcd.h: 272: glcd_write(0x3A);
  1025  00073C  0E3A               	movlw	58
  1026  00073E  EC9B  F008         	call	_glcd_write
  1027                           
  1028                           ;glcd.h: 273: glcd_write(0x00);
  1029  000742  0E00               	movlw	0
  1030  000744  EC9B  F008         	call	_glcd_write
  1031                           
  1032                           ;glcd.h: 274: break;
  1033  000748  0012               	return	
  1034  00074A                     l915:
  1035                           
  1036                           ;glcd.h: 277: glcd_write(0x00);
  1037  00074A  0E00               	movlw	0
  1038  00074C  EC9B  F008         	call	_glcd_write
  1039                           
  1040                           ;glcd.h: 278: glcd_write(0x7F);
  1041  000750  0E7F               	movlw	127
  1042  000752  EC9B  F008         	call	_glcd_write
  1043                           
  1044                           ;glcd.h: 279: glcd_write(0x08);
  1045  000756  0E08               	movlw	8
  1046  000758  EC9B  F008         	call	_glcd_write
  1047                           
  1048                           ;glcd.h: 280: glcd_write(0x08);
  1049  00075C  0E08               	movlw	8
  1050  00075E  EC9B  F008         	call	_glcd_write
  1051                           
  1052                           ;glcd.h: 281: glcd_write(0x08);
  1053  000762  0E08               	movlw	8
  1054  000764  EC9B  F008         	call	_glcd_write
  1055                           
  1056                           ;glcd.h: 282: glcd_write(0x7F);
  1057  000768  0E7F               	movlw	127
  1058  00076A  EC9B  F008         	call	_glcd_write
  1059                           
  1060                           ;glcd.h: 283: glcd_write(0x00);
  1061  00076E  0E00               	movlw	0
  1062  000770  EC9B  F008         	call	_glcd_write
  1063                           
  1064                           ;glcd.h: 284: break;
  1065  000774  0012               	return	
  1066  000776                     l917:
  1067                           
  1068                           ;glcd.h: 287: glcd_write(0x00);
  1069  000776  0E00               	movlw	0
  1070  000778  EC9B  F008         	call	_glcd_write
  1071                           
  1072                           ;glcd.h: 288: glcd_write(0x00);
  1073  00077C  0E00               	movlw	0
  1074  00077E  EC9B  F008         	call	_glcd_write
  1075                           
  1076                           ;glcd.h: 289: glcd_write(0x41);
  1077  000782  0E41               	movlw	65
  1078  000784  EC9B  F008         	call	_glcd_write
  1079                           
  1080                           ;glcd.h: 290: glcd_write(0x7F);
  1081  000788  0E7F               	movlw	127
  1082  00078A  EC9B  F008         	call	_glcd_write
  1083                           
  1084                           ;glcd.h: 291: glcd_write(0x41);
  1085  00078E  0E41               	movlw	65
  1086  000790  EC9B  F008         	call	_glcd_write
  1087                           
  1088                           ;glcd.h: 292: glcd_write(0x00);
  1089  000794  0E00               	movlw	0
  1090  000796  EC9B  F008         	call	_glcd_write
  1091                           
  1092                           ;glcd.h: 293: glcd_write(0x00);
  1093  00079A  0E00               	movlw	0
  1094  00079C  EC9B  F008         	call	_glcd_write
  1095                           
  1096                           ;glcd.h: 294: break;
  1097  0007A0  0012               	return	
  1098  0007A2                     l919:
  1099                           
  1100                           ;glcd.h: 297: glcd_write(0x00);
  1101  0007A2  0E00               	movlw	0
  1102  0007A4  EC9B  F008         	call	_glcd_write
  1103                           
  1104                           ;glcd.h: 298: glcd_write(0x30);
  1105  0007A8  0E30               	movlw	48
  1106  0007AA  EC9B  F008         	call	_glcd_write
  1107                           
  1108                           ;glcd.h: 299: glcd_write(0x40);
  1109  0007AE  0E40               	movlw	64
  1110  0007B0  EC9B  F008         	call	_glcd_write
  1111                           
  1112                           ;glcd.h: 300: glcd_write(0x40);
  1113  0007B4  0E40               	movlw	64
  1114  0007B6  EC9B  F008         	call	_glcd_write
  1115                           
  1116                           ;glcd.h: 301: glcd_write(0x40);
  1117  0007BA  0E40               	movlw	64
  1118  0007BC  EC9B  F008         	call	_glcd_write
  1119                           
  1120                           ;glcd.h: 302: glcd_write(0x3F);
  1121  0007C0  0E3F               	movlw	63
  1122  0007C2  EC9B  F008         	call	_glcd_write
  1123                           
  1124                           ;glcd.h: 303: glcd_write(0x00);
  1125  0007C6  0E00               	movlw	0
  1126  0007C8  EC9B  F008         	call	_glcd_write
  1127                           
  1128                           ;glcd.h: 304: break;
  1129  0007CC  0012               	return	
  1130  0007CE                     l921:
  1131                           
  1132                           ;glcd.h: 307: glcd_write(0x00);
  1133  0007CE  0E00               	movlw	0
  1134  0007D0  EC9B  F008         	call	_glcd_write
  1135                           
  1136                           ;glcd.h: 308: glcd_write(0x7F);
  1137  0007D4  0E7F               	movlw	127
  1138  0007D6  EC9B  F008         	call	_glcd_write
  1139                           
  1140                           ;glcd.h: 309: glcd_write(0x08);
  1141  0007DA  0E08               	movlw	8
  1142  0007DC  EC9B  F008         	call	_glcd_write
  1143                           
  1144                           ;glcd.h: 310: glcd_write(0x14);
  1145  0007E0  0E14               	movlw	20
  1146  0007E2  EC9B  F008         	call	_glcd_write
  1147                           
  1148                           ;glcd.h: 311: glcd_write(0x22);
  1149  0007E6  0E22               	movlw	34
  1150  0007E8  EC9B  F008         	call	_glcd_write
  1151                           
  1152                           ;glcd.h: 312: glcd_write(0x41);
  1153  0007EC  0E41               	movlw	65
  1154  0007EE  EC9B  F008         	call	_glcd_write
  1155                           
  1156                           ;glcd.h: 313: glcd_write(0x00);
  1157  0007F2  0E00               	movlw	0
  1158  0007F4  EC9B  F008         	call	_glcd_write
  1159                           
  1160                           ;glcd.h: 314: break;
  1161  0007F8  0012               	return	
  1162  0007FA                     l923:
  1163                           
  1164                           ;glcd.h: 317: glcd_write(0x00);
  1165  0007FA  0E00               	movlw	0
  1166  0007FC  EC9B  F008         	call	_glcd_write
  1167                           
  1168                           ;glcd.h: 318: glcd_write(0x7F);
  1169  000800  0E7F               	movlw	127
  1170  000802  EC9B  F008         	call	_glcd_write
  1171                           
  1172                           ;glcd.h: 319: glcd_write(0x40);
  1173  000806  0E40               	movlw	64
  1174  000808  EC9B  F008         	call	_glcd_write
  1175                           
  1176                           ;glcd.h: 320: glcd_write(0x40);
  1177  00080C  0E40               	movlw	64
  1178  00080E  EC9B  F008         	call	_glcd_write
  1179                           
  1180                           ;glcd.h: 321: glcd_write(0x40);
  1181  000812  0E40               	movlw	64
  1182  000814  EC9B  F008         	call	_glcd_write
  1183                           
  1184                           ;glcd.h: 322: glcd_write(0x40);
  1185  000818  0E40               	movlw	64
  1186  00081A  EC9B  F008         	call	_glcd_write
  1187                           
  1188                           ;glcd.h: 323: glcd_write(0x00);
  1189  00081E  0E00               	movlw	0
  1190  000820  EC9B  F008         	call	_glcd_write
  1191                           
  1192                           ;glcd.h: 324: break;
  1193  000824  0012               	return	
  1194  000826                     l925:
  1195                           
  1196                           ;glcd.h: 327: glcd_write(0x00);
  1197  000826  0E00               	movlw	0
  1198  000828  EC9B  F008         	call	_glcd_write
  1199                           
  1200                           ;glcd.h: 328: glcd_write(0x7F);
  1201  00082C  0E7F               	movlw	127
  1202  00082E  EC9B  F008         	call	_glcd_write
  1203                           
  1204                           ;glcd.h: 329: glcd_write(0x02);
  1205  000832  0E02               	movlw	2
  1206  000834  EC9B  F008         	call	_glcd_write
  1207                           
  1208                           ;glcd.h: 330: glcd_write(0x0C);
  1209  000838  0E0C               	movlw	12
  1210  00083A  EC9B  F008         	call	_glcd_write
  1211                           
  1212                           ;glcd.h: 331: glcd_write(0x02);
  1213  00083E  0E02               	movlw	2
  1214  000840  EC9B  F008         	call	_glcd_write
  1215                           
  1216                           ;glcd.h: 332: glcd_write(0x7F);
  1217  000844  0E7F               	movlw	127
  1218  000846  EC9B  F008         	call	_glcd_write
  1219                           
  1220                           ;glcd.h: 333: glcd_write(0x00);
  1221  00084A  0E00               	movlw	0
  1222  00084C  EC9B  F008         	call	_glcd_write
  1223                           
  1224                           ;glcd.h: 334: break;
  1225  000850  0012               	return	
  1226  000852                     l927:
  1227                           
  1228                           ;glcd.h: 337: glcd_write(0x00);
  1229  000852  0E00               	movlw	0
  1230  000854  EC9B  F008         	call	_glcd_write
  1231                           
  1232                           ;glcd.h: 338: glcd_write(0x7F);
  1233  000858  0E7F               	movlw	127
  1234  00085A  EC9B  F008         	call	_glcd_write
  1235                           
  1236                           ;glcd.h: 339: glcd_write(0x02);
  1237  00085E  0E02               	movlw	2
  1238  000860  EC9B  F008         	call	_glcd_write
  1239                           
  1240                           ;glcd.h: 340: glcd_write(0x04);
  1241  000864  0E04               	movlw	4
  1242  000866  EC9B  F008         	call	_glcd_write
  1243                           
  1244                           ;glcd.h: 341: glcd_write(0x08);
  1245  00086A  0E08               	movlw	8
  1246  00086C  EC9B  F008         	call	_glcd_write
  1247                           
  1248                           ;glcd.h: 342: glcd_write(0x7F);
  1249  000870  0E7F               	movlw	127
  1250  000872  EC9B  F008         	call	_glcd_write
  1251                           
  1252                           ;glcd.h: 343: glcd_write(0x00);
  1253  000876  0E00               	movlw	0
  1254  000878  EC9B  F008         	call	_glcd_write
  1255                           
  1256                           ;glcd.h: 344: break;
  1257  00087C  0012               	return	
  1258  00087E                     l929:
  1259                           
  1260                           ;glcd.h: 347: glcd_write(0x00);
  1261  00087E  0E00               	movlw	0
  1262  000880  EC9B  F008         	call	_glcd_write
  1263                           
  1264                           ;glcd.h: 348: glcd_write(0x3E);
  1265  000884  0E3E               	movlw	62
  1266  000886  EC9B  F008         	call	_glcd_write
  1267                           
  1268                           ;glcd.h: 349: glcd_write(0x41);
  1269  00088A  0E41               	movlw	65
  1270  00088C  EC9B  F008         	call	_glcd_write
  1271                           
  1272                           ;glcd.h: 350: glcd_write(0x41);
  1273  000890  0E41               	movlw	65
  1274  000892  EC9B  F008         	call	_glcd_write
  1275                           
  1276                           ;glcd.h: 351: glcd_write(0x41);
  1277  000896  0E41               	movlw	65
  1278  000898  EC9B  F008         	call	_glcd_write
  1279                           
  1280                           ;glcd.h: 352: glcd_write(0x3E);
  1281  00089C  0E3E               	movlw	62
  1282  00089E  EC9B  F008         	call	_glcd_write
  1283                           
  1284                           ;glcd.h: 353: glcd_write(0x00);
  1285  0008A2  0E00               	movlw	0
  1286  0008A4  EC9B  F008         	call	_glcd_write
  1287                           
  1288                           ;glcd.h: 354: break;
  1289  0008A8  0012               	return	
  1290  0008AA                     l931:
  1291                           
  1292                           ;glcd.h: 357: glcd_write(0x00);
  1293  0008AA  0E00               	movlw	0
  1294  0008AC  EC9B  F008         	call	_glcd_write
  1295                           
  1296                           ;glcd.h: 358: glcd_write(0x7F);
  1297  0008B0  0E7F               	movlw	127
  1298  0008B2  EC9B  F008         	call	_glcd_write
  1299                           
  1300                           ;glcd.h: 359: glcd_write(0x09);
  1301  0008B6  0E09               	movlw	9
  1302  0008B8  EC9B  F008         	call	_glcd_write
  1303                           
  1304                           ;glcd.h: 360: glcd_write(0x09);
  1305  0008BC  0E09               	movlw	9
  1306  0008BE  EC9B  F008         	call	_glcd_write
  1307                           
  1308                           ;glcd.h: 361: glcd_write(0x09);
  1309  0008C2  0E09               	movlw	9
  1310  0008C4  EC9B  F008         	call	_glcd_write
  1311                           
  1312                           ;glcd.h: 362: glcd_write(0x06);
  1313  0008C8  0E06               	movlw	6
  1314  0008CA  EC9B  F008         	call	_glcd_write
  1315                           
  1316                           ;glcd.h: 363: glcd_write(0x00);
  1317  0008CE  0E00               	movlw	0
  1318  0008D0  EC9B  F008         	call	_glcd_write
  1319                           
  1320                           ;glcd.h: 364: break;
  1321  0008D4  0012               	return	
  1322  0008D6                     l933:
  1323                           
  1324                           ;glcd.h: 367: glcd_write(0x00);
  1325  0008D6  0E00               	movlw	0
  1326  0008D8  EC9B  F008         	call	_glcd_write
  1327                           
  1328                           ;glcd.h: 368: glcd_write(0x1E);
  1329  0008DC  0E1E               	movlw	30
  1330  0008DE  EC9B  F008         	call	_glcd_write
  1331                           
  1332                           ;glcd.h: 369: glcd_write(0x21);
  1333  0008E2  0E21               	movlw	33
  1334  0008E4  EC9B  F008         	call	_glcd_write
  1335                           
  1336                           ;glcd.h: 370: glcd_write(0x21);
  1337  0008E8  0E21               	movlw	33
  1338  0008EA  EC9B  F008         	call	_glcd_write
  1339                           
  1340                           ;glcd.h: 371: glcd_write(0x21);
  1341  0008EE  0E21               	movlw	33
  1342  0008F0  EC9B  F008         	call	_glcd_write
  1343                           
  1344                           ;glcd.h: 372: glcd_write(0x5E);
  1345  0008F4  0E5E               	movlw	94
  1346  0008F6  EC9B  F008         	call	_glcd_write
  1347                           
  1348                           ;glcd.h: 373: glcd_write(0x00);
  1349  0008FA  0E00               	movlw	0
  1350  0008FC  EC9B  F008         	call	_glcd_write
  1351                           
  1352                           ;glcd.h: 374: break;
  1353  000900  0012               	return	
  1354  000902                     l935:
  1355                           
  1356                           ;glcd.h: 377: glcd_write(0x00);
  1357  000902  0E00               	movlw	0
  1358  000904  EC9B  F008         	call	_glcd_write
  1359                           
  1360                           ;glcd.h: 378: glcd_write(0x7F);
  1361  000908  0E7F               	movlw	127
  1362  00090A  EC9B  F008         	call	_glcd_write
  1363                           
  1364                           ;glcd.h: 379: glcd_write(0x09);
  1365  00090E  0E09               	movlw	9
  1366  000910  EC9B  F008         	call	_glcd_write
  1367                           
  1368                           ;glcd.h: 380: glcd_write(0x09);
  1369  000914  0E09               	movlw	9
  1370  000916  EC9B  F008         	call	_glcd_write
  1371                           
  1372                           ;glcd.h: 381: glcd_write(0x09);
  1373  00091A  0E09               	movlw	9
  1374  00091C  EC9B  F008         	call	_glcd_write
  1375                           
  1376                           ;glcd.h: 382: glcd_write(0x76);
  1377  000920  0E76               	movlw	118
  1378  000922  EC9B  F008         	call	_glcd_write
  1379                           
  1380                           ;glcd.h: 383: glcd_write(0x00);
  1381  000926  0E00               	movlw	0
  1382  000928  EC9B  F008         	call	_glcd_write
  1383                           
  1384                           ;glcd.h: 384: break;
  1385  00092C  0012               	return	
  1386  00092E                     l937:
  1387                           
  1388                           ;glcd.h: 387: glcd_write(0x00);
  1389  00092E  0E00               	movlw	0
  1390  000930  EC9B  F008         	call	_glcd_write
  1391                           
  1392                           ;glcd.h: 388: glcd_write(0x26);
  1393  000934  0E26               	movlw	38
  1394  000936  EC9B  F008         	call	_glcd_write
  1395                           
  1396                           ;glcd.h: 389: glcd_write(0x49);
  1397  00093A  0E49               	movlw	73
  1398  00093C  EC9B  F008         	call	_glcd_write
  1399                           
  1400                           ;glcd.h: 390: glcd_write(0x49);
  1401  000940  0E49               	movlw	73
  1402  000942  EC9B  F008         	call	_glcd_write
  1403                           
  1404                           ;glcd.h: 391: glcd_write(0x49);
  1405  000946  0E49               	movlw	73
  1406  000948  EC9B  F008         	call	_glcd_write
  1407                           
  1408                           ;glcd.h: 392: glcd_write(0x32);
  1409  00094C  0E32               	movlw	50
  1410  00094E  EC9B  F008         	call	_glcd_write
  1411                           
  1412                           ;glcd.h: 393: glcd_write(0x00);
  1413  000952  0E00               	movlw	0
  1414  000954  EC9B  F008         	call	_glcd_write
  1415                           
  1416                           ;glcd.h: 394: break;
  1417  000958  0012               	return	
  1418  00095A                     l939:
  1419                           
  1420                           ;glcd.h: 397: glcd_write(0x00);
  1421  00095A  0E00               	movlw	0
  1422  00095C  EC9B  F008         	call	_glcd_write
  1423                           
  1424                           ;glcd.h: 398: glcd_write(0x01);
  1425  000960  0E01               	movlw	1
  1426  000962  EC9B  F008         	call	_glcd_write
  1427                           
  1428                           ;glcd.h: 399: glcd_write(0x01);
  1429  000966  0E01               	movlw	1
  1430  000968  EC9B  F008         	call	_glcd_write
  1431                           
  1432                           ;glcd.h: 400: glcd_write(0x7F);
  1433  00096C  0E7F               	movlw	127
  1434  00096E  EC9B  F008         	call	_glcd_write
  1435                           
  1436                           ;glcd.h: 401: glcd_write(0x01);
  1437  000972  0E01               	movlw	1
  1438  000974  EC9B  F008         	call	_glcd_write
  1439                           
  1440                           ;glcd.h: 402: glcd_write(0x01);
  1441  000978  0E01               	movlw	1
  1442  00097A  EC9B  F008         	call	_glcd_write
  1443                           
  1444                           ;glcd.h: 403: glcd_write(0x00);
  1445  00097E  0E00               	movlw	0
  1446  000980  EC9B  F008         	call	_glcd_write
  1447                           
  1448                           ;glcd.h: 404: break;
  1449  000984  0012               	return	
  1450  000986                     l941:
  1451                           
  1452                           ;glcd.h: 407: glcd_write(0x00);
  1453  000986  0E00               	movlw	0
  1454  000988  EC9B  F008         	call	_glcd_write
  1455                           
  1456                           ;glcd.h: 408: glcd_write(0x3F);
  1457  00098C  0E3F               	movlw	63
  1458  00098E  EC9B  F008         	call	_glcd_write
  1459                           
  1460                           ;glcd.h: 409: glcd_write(0x40);
  1461  000992  0E40               	movlw	64
  1462  000994  EC9B  F008         	call	_glcd_write
  1463                           
  1464                           ;glcd.h: 410: glcd_write(0x40);
  1465  000998  0E40               	movlw	64
  1466  00099A  EC9B  F008         	call	_glcd_write
  1467                           
  1468                           ;glcd.h: 411: glcd_write(0x40);
  1469  00099E  0E40               	movlw	64
  1470  0009A0  EC9B  F008         	call	_glcd_write
  1471                           
  1472                           ;glcd.h: 412: glcd_write(0x3F);
  1473  0009A4  0E3F               	movlw	63
  1474  0009A6  EC9B  F008         	call	_glcd_write
  1475                           
  1476                           ;glcd.h: 413: glcd_write(0x00);
  1477  0009AA  0E00               	movlw	0
  1478  0009AC  EC9B  F008         	call	_glcd_write
  1479                           
  1480                           ;glcd.h: 414: break;
  1481  0009B0  0012               	return	
  1482  0009B2                     l943:
  1483                           
  1484                           ;glcd.h: 417: glcd_write(0x00);
  1485  0009B2  0E00               	movlw	0
  1486  0009B4  EC9B  F008         	call	_glcd_write
  1487                           
  1488                           ;glcd.h: 418: glcd_write(0x1F);
  1489  0009B8  0E1F               	movlw	31
  1490  0009BA  EC9B  F008         	call	_glcd_write
  1491                           
  1492                           ;glcd.h: 419: glcd_write(0x20);
  1493  0009BE  0E20               	movlw	32
  1494  0009C0  EC9B  F008         	call	_glcd_write
  1495                           
  1496                           ;glcd.h: 420: glcd_write(0x40);
  1497  0009C4  0E40               	movlw	64
  1498  0009C6  EC9B  F008         	call	_glcd_write
  1499                           
  1500                           ;glcd.h: 421: glcd_write(0x20);
  1501  0009CA  0E20               	movlw	32
  1502  0009CC  EC9B  F008         	call	_glcd_write
  1503                           
  1504                           ;glcd.h: 422: glcd_write(0x1F);
  1505  0009D0  0E1F               	movlw	31
  1506  0009D2  EC9B  F008         	call	_glcd_write
  1507                           
  1508                           ;glcd.h: 423: glcd_write(0x00);
  1509  0009D6  0E00               	movlw	0
  1510  0009D8  EC9B  F008         	call	_glcd_write
  1511                           
  1512                           ;glcd.h: 424: break;
  1513  0009DC  0012               	return	
  1514  0009DE                     l945:
  1515                           
  1516                           ;glcd.h: 427: glcd_write(0x00);
  1517  0009DE  0E00               	movlw	0
  1518  0009E0  EC9B  F008         	call	_glcd_write
  1519                           
  1520                           ;glcd.h: 428: glcd_write(0x7F);
  1521  0009E4  0E7F               	movlw	127
  1522  0009E6  EC9B  F008         	call	_glcd_write
  1523                           
  1524                           ;glcd.h: 429: glcd_write(0x20);
  1525  0009EA  0E20               	movlw	32
  1526  0009EC  EC9B  F008         	call	_glcd_write
  1527                           
  1528                           ;glcd.h: 430: glcd_write(0x10);
  1529  0009F0  0E10               	movlw	16
  1530  0009F2  EC9B  F008         	call	_glcd_write
  1531                           
  1532                           ;glcd.h: 431: glcd_write(0x20);
  1533  0009F6  0E20               	movlw	32
  1534  0009F8  EC9B  F008         	call	_glcd_write
  1535                           
  1536                           ;glcd.h: 432: glcd_write(0x7F);
  1537  0009FC  0E7F               	movlw	127
  1538  0009FE  EC9B  F008         	call	_glcd_write
  1539                           
  1540                           ;glcd.h: 433: glcd_write(0x00);
  1541  000A02  0E00               	movlw	0
  1542  000A04  EC9B  F008         	call	_glcd_write
  1543                           
  1544                           ;glcd.h: 434: break;
  1545  000A08  0012               	return	
  1546  000A0A                     l947:
  1547                           
  1548                           ;glcd.h: 437: glcd_write(0x00);
  1549  000A0A  0E00               	movlw	0
  1550  000A0C  EC9B  F008         	call	_glcd_write
  1551                           
  1552                           ;glcd.h: 438: glcd_write(0x41);
  1553  000A10  0E41               	movlw	65
  1554  000A12  EC9B  F008         	call	_glcd_write
  1555                           
  1556                           ;glcd.h: 439: glcd_write(0x22);
  1557  000A16  0E22               	movlw	34
  1558  000A18  EC9B  F008         	call	_glcd_write
  1559                           
  1560                           ;glcd.h: 440: glcd_write(0x1C);
  1561  000A1C  0E1C               	movlw	28
  1562  000A1E  EC9B  F008         	call	_glcd_write
  1563                           
  1564                           ;glcd.h: 441: glcd_write(0x22);
  1565  000A22  0E22               	movlw	34
  1566  000A24  EC9B  F008         	call	_glcd_write
  1567                           
  1568                           ;glcd.h: 442: glcd_write(0x41);
  1569  000A28  0E41               	movlw	65
  1570  000A2A  EC9B  F008         	call	_glcd_write
  1571                           
  1572                           ;glcd.h: 443: glcd_write(0x00);
  1573  000A2E  0E00               	movlw	0
  1574  000A30  EC9B  F008         	call	_glcd_write
  1575                           
  1576                           ;glcd.h: 444: break;
  1577  000A34  0012               	return	
  1578  000A36                     l949:
  1579                           
  1580                           ;glcd.h: 447: glcd_write(0x00);
  1581  000A36  0E00               	movlw	0
  1582  000A38  EC9B  F008         	call	_glcd_write
  1583                           
  1584                           ;glcd.h: 448: glcd_write(0x07);
  1585  000A3C  0E07               	movlw	7
  1586  000A3E  EC9B  F008         	call	_glcd_write
  1587                           
  1588                           ;glcd.h: 449: glcd_write(0x08);
  1589  000A42  0E08               	movlw	8
  1590  000A44  EC9B  F008         	call	_glcd_write
  1591                           
  1592                           ;glcd.h: 450: glcd_write(0x70);
  1593  000A48  0E70               	movlw	112
  1594  000A4A  EC9B  F008         	call	_glcd_write
  1595                           
  1596                           ;glcd.h: 451: glcd_write(0x08);
  1597  000A4E  0E08               	movlw	8
  1598  000A50  EC9B  F008         	call	_glcd_write
  1599                           
  1600                           ;glcd.h: 452: glcd_write(0x07);
  1601  000A54  0E07               	movlw	7
  1602  000A56  EC9B  F008         	call	_glcd_write
  1603                           
  1604                           ;glcd.h: 453: glcd_write(0x00);
  1605  000A5A  0E00               	movlw	0
  1606  000A5C  EC9B  F008         	call	_glcd_write
  1607                           
  1608                           ;glcd.h: 454: break;
  1609  000A60  0012               	return	
  1610  000A62                     l951:
  1611                           
  1612                           ;glcd.h: 457: glcd_write(0x00);
  1613  000A62  0E00               	movlw	0
  1614  000A64  EC9B  F008         	call	_glcd_write
  1615                           
  1616                           ;glcd.h: 458: glcd_write(0x61);
  1617  000A68  0E61               	movlw	97
  1618  000A6A  EC9B  F008         	call	_glcd_write
  1619                           
  1620                           ;glcd.h: 459: glcd_write(0x51);
  1621  000A6E  0E51               	movlw	81
  1622  000A70  EC9B  F008         	call	_glcd_write
  1623                           
  1624                           ;glcd.h: 460: glcd_write(0x49);
  1625  000A74  0E49               	movlw	73
  1626  000A76  EC9B  F008         	call	_glcd_write
  1627                           
  1628                           ;glcd.h: 461: glcd_write(0x45);
  1629  000A7A  0E45               	movlw	69
  1630  000A7C  EC9B  F008         	call	_glcd_write
  1631                           
  1632                           ;glcd.h: 462: glcd_write(0x43);
  1633  000A80  0E43               	movlw	67
  1634  000A82  EC9B  F008         	call	_glcd_write
  1635                           
  1636                           ;glcd.h: 463: glcd_write(0x00);
  1637  000A86  0E00               	movlw	0
  1638  000A88  EC9B  F008         	call	_glcd_write
  1639                           
  1640                           ;glcd.h: 464: break;
  1641  000A8C  0012               	return	
  1642  000A8E                     l953:
  1643                           
  1644                           ;glcd.h: 467: glcd_write(0x00);
  1645  000A8E  0E00               	movlw	0
  1646  000A90  EC9B  F008         	call	_glcd_write
  1647                           
  1648                           ;glcd.h: 468: glcd_write(0x3E);
  1649  000A94  0E3E               	movlw	62
  1650  000A96  EC9B  F008         	call	_glcd_write
  1651                           
  1652                           ;glcd.h: 469: glcd_write(0x51);
  1653  000A9A  0E51               	movlw	81
  1654  000A9C  EC9B  F008         	call	_glcd_write
  1655                           
  1656                           ;glcd.h: 470: glcd_write(0x49);
  1657  000AA0  0E49               	movlw	73
  1658  000AA2  EC9B  F008         	call	_glcd_write
  1659                           
  1660                           ;glcd.h: 471: glcd_write(0x45);
  1661  000AA6  0E45               	movlw	69
  1662  000AA8  EC9B  F008         	call	_glcd_write
  1663                           
  1664                           ;glcd.h: 472: glcd_write(0x3E);
  1665  000AAC  0E3E               	movlw	62
  1666  000AAE  EC9B  F008         	call	_glcd_write
  1667                           
  1668                           ;glcd.h: 473: glcd_write(0x00);
  1669  000AB2  0E00               	movlw	0
  1670  000AB4  EC9B  F008         	call	_glcd_write
  1671                           
  1672                           ;glcd.h: 474: break;
  1673  000AB8  0012               	return	
  1674  000ABA                     l955:
  1675                           
  1676                           ;glcd.h: 477: glcd_write(0x00);
  1677  000ABA  0E00               	movlw	0
  1678  000ABC  EC9B  F008         	call	_glcd_write
  1679                           
  1680                           ;glcd.h: 478: glcd_write(0x04);
  1681  000AC0  0E04               	movlw	4
  1682  000AC2  EC9B  F008         	call	_glcd_write
  1683                           
  1684                           ;glcd.h: 479: glcd_write(0x02);
  1685  000AC6  0E02               	movlw	2
  1686  000AC8  EC9B  F008         	call	_glcd_write
  1687                           
  1688                           ;glcd.h: 480: glcd_write(0x7F);
  1689  000ACC  0E7F               	movlw	127
  1690  000ACE  EC9B  F008         	call	_glcd_write
  1691                           
  1692                           ;glcd.h: 481: glcd_write(0x00);
  1693  000AD2  0E00               	movlw	0
  1694  000AD4  EC9B  F008         	call	_glcd_write
  1695                           
  1696                           ;glcd.h: 482: glcd_write(0x00);
  1697  000AD8  0E00               	movlw	0
  1698  000ADA  EC9B  F008         	call	_glcd_write
  1699                           
  1700                           ;glcd.h: 483: glcd_write(0x00);
  1701  000ADE  0E00               	movlw	0
  1702  000AE0  EC9B  F008         	call	_glcd_write
  1703                           
  1704                           ;glcd.h: 484: break;
  1705  000AE4  0012               	return	
  1706  000AE6                     l957:
  1707                           
  1708                           ;glcd.h: 487: glcd_write(0x00);
  1709  000AE6  0E00               	movlw	0
  1710  000AE8  EC9B  F008         	call	_glcd_write
  1711                           
  1712                           ;glcd.h: 488: glcd_write(0x42);
  1713  000AEC  0E42               	movlw	66
  1714  000AEE  EC9B  F008         	call	_glcd_write
  1715                           
  1716                           ;glcd.h: 489: glcd_write(0x61);
  1717  000AF2  0E61               	movlw	97
  1718  000AF4  EC9B  F008         	call	_glcd_write
  1719                           
  1720                           ;glcd.h: 490: glcd_write(0x51);
  1721  000AF8  0E51               	movlw	81
  1722  000AFA  EC9B  F008         	call	_glcd_write
  1723                           
  1724                           ;glcd.h: 491: glcd_write(0x49);
  1725  000AFE  0E49               	movlw	73
  1726  000B00  EC9B  F008         	call	_glcd_write
  1727                           
  1728                           ;glcd.h: 492: glcd_write(0x46);
  1729  000B04  0E46               	movlw	70
  1730  000B06  EC9B  F008         	call	_glcd_write
  1731                           
  1732                           ;glcd.h: 493: glcd_write(0x00);
  1733  000B0A  0E00               	movlw	0
  1734  000B0C  EC9B  F008         	call	_glcd_write
  1735                           
  1736                           ;glcd.h: 494: break;
  1737  000B10  0012               	return	
  1738  000B12                     l959:
  1739                           
  1740                           ;glcd.h: 497: glcd_write(0x00);
  1741  000B12  0E00               	movlw	0
  1742  000B14  EC9B  F008         	call	_glcd_write
  1743                           
  1744                           ;glcd.h: 498: glcd_write(0x22);
  1745  000B18  0E22               	movlw	34
  1746  000B1A  EC9B  F008         	call	_glcd_write
  1747                           
  1748                           ;glcd.h: 499: glcd_write(0x41);
  1749  000B1E  0E41               	movlw	65
  1750  000B20  EC9B  F008         	call	_glcd_write
  1751                           
  1752                           ;glcd.h: 500: glcd_write(0x49);
  1753  000B24  0E49               	movlw	73
  1754  000B26  EC9B  F008         	call	_glcd_write
  1755                           
  1756                           ;glcd.h: 501: glcd_write(0x49);
  1757  000B2A  0E49               	movlw	73
  1758  000B2C  EC9B  F008         	call	_glcd_write
  1759                           
  1760                           ;glcd.h: 502: glcd_write(0x36);
  1761  000B30  0E36               	movlw	54
  1762  000B32  EC9B  F008         	call	_glcd_write
  1763                           
  1764                           ;glcd.h: 503: glcd_write(0x00);
  1765  000B36  0E00               	movlw	0
  1766  000B38  EC9B  F008         	call	_glcd_write
  1767                           
  1768                           ;glcd.h: 504: break;
  1769  000B3C  0012               	return	
  1770  000B3E                     l961:
  1771                           
  1772                           ;glcd.h: 507: glcd_write(0x00);
  1773  000B3E  0E00               	movlw	0
  1774  000B40  EC9B  F008         	call	_glcd_write
  1775                           
  1776                           ;glcd.h: 508: glcd_write(0x18);
  1777  000B44  0E18               	movlw	24
  1778  000B46  EC9B  F008         	call	_glcd_write
  1779                           
  1780                           ;glcd.h: 509: glcd_write(0x14);
  1781  000B4A  0E14               	movlw	20
  1782  000B4C  EC9B  F008         	call	_glcd_write
  1783                           
  1784                           ;glcd.h: 510: glcd_write(0x12);
  1785  000B50  0E12               	movlw	18
  1786  000B52  EC9B  F008         	call	_glcd_write
  1787                           
  1788                           ;glcd.h: 511: glcd_write(0x7F);
  1789  000B56  0E7F               	movlw	127
  1790  000B58  EC9B  F008         	call	_glcd_write
  1791                           
  1792                           ;glcd.h: 512: glcd_write(0x10);
  1793  000B5C  0E10               	movlw	16
  1794  000B5E  EC9B  F008         	call	_glcd_write
  1795                           
  1796                           ;glcd.h: 513: glcd_write(0x00);
  1797  000B62  0E00               	movlw	0
  1798  000B64  EC9B  F008         	call	_glcd_write
  1799                           
  1800                           ;glcd.h: 514: break;
  1801  000B68  0012               	return	
  1802  000B6A                     l963:
  1803                           
  1804                           ;glcd.h: 517: glcd_write(0x00);
  1805  000B6A  0E00               	movlw	0
  1806  000B6C  EC9B  F008         	call	_glcd_write
  1807                           
  1808                           ;glcd.h: 518: glcd_write(0x27);
  1809  000B70  0E27               	movlw	39
  1810  000B72  EC9B  F008         	call	_glcd_write
  1811                           
  1812                           ;glcd.h: 519: glcd_write(0x45);
  1813  000B76  0E45               	movlw	69
  1814  000B78  EC9B  F008         	call	_glcd_write
  1815                           
  1816                           ;glcd.h: 520: glcd_write(0x45);
  1817  000B7C  0E45               	movlw	69
  1818  000B7E  EC9B  F008         	call	_glcd_write
  1819                           
  1820                           ;glcd.h: 521: glcd_write(0x45);
  1821  000B82  0E45               	movlw	69
  1822  000B84  EC9B  F008         	call	_glcd_write
  1823                           
  1824                           ;glcd.h: 522: glcd_write(0x39);
  1825  000B88  0E39               	movlw	57
  1826  000B8A  EC9B  F008         	call	_glcd_write
  1827                           
  1828                           ;glcd.h: 523: glcd_write(0x00);
  1829  000B8E  0E00               	movlw	0
  1830  000B90  EC9B  F008         	call	_glcd_write
  1831                           
  1832                           ;glcd.h: 524: break;
  1833  000B94  0012               	return	
  1834  000B96                     l965:
  1835                           
  1836                           ;glcd.h: 527: glcd_write(0x00);
  1837  000B96  0E00               	movlw	0
  1838  000B98  EC9B  F008         	call	_glcd_write
  1839                           
  1840                           ;glcd.h: 528: glcd_write(0x3E);
  1841  000B9C  0E3E               	movlw	62
  1842  000B9E  EC9B  F008         	call	_glcd_write
  1843                           
  1844                           ;glcd.h: 529: glcd_write(0x49);
  1845  000BA2  0E49               	movlw	73
  1846  000BA4  EC9B  F008         	call	_glcd_write
  1847                           
  1848                           ;glcd.h: 530: glcd_write(0x49);
  1849  000BA8  0E49               	movlw	73
  1850  000BAA  EC9B  F008         	call	_glcd_write
  1851                           
  1852                           ;glcd.h: 531: glcd_write(0x49);
  1853  000BAE  0E49               	movlw	73
  1854  000BB0  EC9B  F008         	call	_glcd_write
  1855                           
  1856                           ;glcd.h: 532: glcd_write(0x32);
  1857  000BB4  0E32               	movlw	50
  1858  000BB6  EC9B  F008         	call	_glcd_write
  1859                           
  1860                           ;glcd.h: 533: glcd_write(0x00);
  1861  000BBA  0E00               	movlw	0
  1862  000BBC  EC9B  F008         	call	_glcd_write
  1863                           
  1864                           ;glcd.h: 534: break;
  1865  000BC0  0012               	return	
  1866  000BC2                     l967:
  1867                           
  1868                           ;glcd.h: 537: glcd_write(0x00);
  1869  000BC2  0E00               	movlw	0
  1870  000BC4  EC9B  F008         	call	_glcd_write
  1871                           
  1872                           ;glcd.h: 538: glcd_write(0x01);
  1873  000BC8  0E01               	movlw	1
  1874  000BCA  EC9B  F008         	call	_glcd_write
  1875                           
  1876                           ;glcd.h: 539: glcd_write(0x01);
  1877  000BCE  0E01               	movlw	1
  1878  000BD0  EC9B  F008         	call	_glcd_write
  1879                           
  1880                           ;glcd.h: 540: glcd_write(0x71);
  1881  000BD4  0E71               	movlw	113
  1882  000BD6  EC9B  F008         	call	_glcd_write
  1883                           
  1884                           ;glcd.h: 541: glcd_write(0x09);
  1885  000BDA  0E09               	movlw	9
  1886  000BDC  EC9B  F008         	call	_glcd_write
  1887                           
  1888                           ;glcd.h: 542: glcd_write(0x07);
  1889  000BE0  0E07               	movlw	7
  1890  000BE2  EC9B  F008         	call	_glcd_write
  1891                           
  1892                           ;glcd.h: 543: glcd_write(0x00);
  1893  000BE6  0E00               	movlw	0
  1894  000BE8  EC9B  F008         	call	_glcd_write
  1895                           
  1896                           ;glcd.h: 544: break;
  1897  000BEC  0012               	return	
  1898  000BEE                     l969:
  1899                           
  1900                           ;glcd.h: 547: glcd_write(0x00);
  1901  000BEE  0E00               	movlw	0
  1902  000BF0  EC9B  F008         	call	_glcd_write
  1903                           
  1904                           ;glcd.h: 548: glcd_write(0x36);
  1905  000BF4  0E36               	movlw	54
  1906  000BF6  EC9B  F008         	call	_glcd_write
  1907                           
  1908                           ;glcd.h: 549: glcd_write(0x49);
  1909  000BFA  0E49               	movlw	73
  1910  000BFC  EC9B  F008         	call	_glcd_write
  1911                           
  1912                           ;glcd.h: 550: glcd_write(0x49);
  1913  000C00  0E49               	movlw	73
  1914  000C02  EC9B  F008         	call	_glcd_write
  1915                           
  1916                           ;glcd.h: 551: glcd_write(0x49);
  1917  000C06  0E49               	movlw	73
  1918  000C08  EC9B  F008         	call	_glcd_write
  1919                           
  1920                           ;glcd.h: 552: glcd_write(0x36);
  1921  000C0C  0E36               	movlw	54
  1922  000C0E  EC9B  F008         	call	_glcd_write
  1923                           
  1924                           ;glcd.h: 553: glcd_write(0x00);
  1925  000C12  0E00               	movlw	0
  1926  000C14  EC9B  F008         	call	_glcd_write
  1927                           
  1928                           ;glcd.h: 554: break;
  1929  000C18  0012               	return	
  1930  000C1A                     l971:
  1931                           
  1932                           ;glcd.h: 557: glcd_write(0x00);
  1933  000C1A  0E00               	movlw	0
  1934  000C1C  EC9B  F008         	call	_glcd_write
  1935                           
  1936                           ;glcd.h: 558: glcd_write(0x26);
  1937  000C20  0E26               	movlw	38
  1938  000C22  EC9B  F008         	call	_glcd_write
  1939                           
  1940                           ;glcd.h: 559: glcd_write(0x49);
  1941  000C26  0E49               	movlw	73
  1942  000C28  EC9B  F008         	call	_glcd_write
  1943                           
  1944                           ;glcd.h: 560: glcd_write(0x49);
  1945  000C2C  0E49               	movlw	73
  1946  000C2E  EC9B  F008         	call	_glcd_write
  1947                           
  1948                           ;glcd.h: 561: glcd_write(0x49);
  1949  000C32  0E49               	movlw	73
  1950  000C34  EC9B  F008         	call	_glcd_write
  1951                           
  1952                           ;glcd.h: 562: glcd_write(0x3E);
  1953  000C38  0E3E               	movlw	62
  1954  000C3A  EC9B  F008         	call	_glcd_write
  1955                           
  1956                           ;glcd.h: 563: glcd_write(0x00);
  1957  000C3E  0E00               	movlw	0
  1958  000C40  EC9B  F008         	call	_glcd_write
  1959                           
  1960                           ;glcd.h: 564: break;
  1961  000C44  0012               	return	
  1962  000C46                     l973:
  1963                           
  1964                           ;glcd.h: 567: glcd_write(0x00);
  1965  000C46  0E00               	movlw	0
  1966  000C48  EC9B  F008         	call	_glcd_write
  1967                           
  1968                           ;glcd.h: 568: glcd_write(0x00);
  1969  000C4C  0E00               	movlw	0
  1970  000C4E  EC9B  F008         	call	_glcd_write
  1971                           
  1972                           ;glcd.h: 569: glcd_write(0x00);
  1973  000C52  0E00               	movlw	0
  1974  000C54  EC9B  F008         	call	_glcd_write
  1975                           
  1976                           ;glcd.h: 570: glcd_write(0x00);
  1977  000C58  0E00               	movlw	0
  1978  000C5A  EC9B  F008         	call	_glcd_write
  1979                           
  1980                           ;glcd.h: 571: glcd_write(0x00);
  1981  000C5E  0E00               	movlw	0
  1982  000C60  EC9B  F008         	call	_glcd_write
  1983                           
  1984                           ;glcd.h: 572: break;
  1985  000C64  0012               	return	
  1986  000C66                     l975:
  1987                           
  1988                           ;glcd.h: 575: glcd_write(0xFF);
  1989  000C66  0EFF               	movlw	255
  1990  000C68  EC9B  F008         	call	_glcd_write
  1991                           
  1992                           ;glcd.h: 576: glcd_write(0xFF);
  1993  000C6C  0EFF               	movlw	255
  1994  000C6E  EC9B  F008         	call	_glcd_write
  1995                           
  1996                           ;glcd.h: 577: glcd_write(0xFF);
  1997  000C72  0EFF               	movlw	255
  1998  000C74  EC9B  F008         	call	_glcd_write
  1999                           
  2000                           ;glcd.h: 578: glcd_write(0xFF);
  2001  000C78  0EFF               	movlw	255
  2002  000C7A  EC9B  F008         	call	_glcd_write
  2003                           
  2004                           ;glcd.h: 579: glcd_write(0xFF);
  2005  000C7E  0EFF               	movlw	255
  2006  000C80  EC9B  F008         	call	_glcd_write
  2007                           
  2008                           ;glcd.h: 580: break;
  2009  000C84  0012               	return	
  2010  000C86                     l977:
  2011                           
  2012                           ;glcd.h: 583: glcd_write(0xFF);
  2013  000C86  0EFF               	movlw	255
  2014  000C88  EC9B  F008         	call	_glcd_write
  2015                           
  2016                           ;glcd.h: 584: break;
  2017  000C8C  0012               	return	
  2018  000C8E                     l979:
  2019                           
  2020                           ;glcd.h: 587: glcd_write(0x00);
  2021  000C8E  0E00               	movlw	0
  2022  000C90  EC9B  F008         	call	_glcd_write
  2023                           
  2024                           ;glcd.h: 588: glcd_write(0x0C);
  2025  000C94  0E0C               	movlw	12
  2026  000C96  EC9B  F008         	call	_glcd_write
  2027                           
  2028                           ;glcd.h: 589: glcd_write(0x12);
  2029  000C9A  0E12               	movlw	18
  2030  000C9C  EC9B  F008         	call	_glcd_write
  2031                           
  2032                           ;glcd.h: 590: glcd_write(0x12);
  2033  000CA0  0E12               	movlw	18
  2034  000CA2  EC9B  F008         	call	_glcd_write
  2035                           
  2036                           ;glcd.h: 591: glcd_write(0x0C);
  2037  000CA6  0E0C               	movlw	12
  2038  000CA8  EC9B  F008         	call	_glcd_write
  2039                           
  2040                           ;glcd.h: 592: glcd_write(0x00);
  2041  000CAC  0E00               	movlw	0
  2042  000CAE  EC9B  F008         	call	_glcd_write
  2043                           
  2044                           ;glcd.h: 598: }
  2045                           
  2046                           ;glcd.h: 597: break;
  2047                           
  2048                           ;glcd.h: 596: default:
  2049                           
  2050                           ;glcd.h: 593: break;
  2051  000CB2  0012               	return	
  2052  000CB4                     l983:
  2053  000CB4  5002               	movf	glcd_text@text,w,c
  2054                           
  2055                           ; Switch size 1, requested type "space"
  2056                           ; Number of cases is 40, Range of values is 20 to 124
  2057                           ; switch strategies available:
  2058                           ; Name         Instructions Cycles
  2059                           ; simple_byte          121    61 (average)
  2060                           ;	Chosen strategy is simple_byte
  2061  000CB6  0A14               	xorlw	20	; case 20
  2062  000CB8  B4D8               	btfsc	status,2,c
  2063  000CBA  D7E5               	goto	l977
  2064  000CBC  0A34               	xorlw	52	; case 32
  2065  000CBE  B4D8               	btfsc	status,2,c
  2066  000CC0  D7C2               	goto	l973
  2067  000CC2  0A0A               	xorlw	10	; case 42
  2068  000CC4  B4D8               	btfsc	status,2,c
  2069  000CC6  D7E3               	goto	l979
  2070  000CC8  0A1A               	xorlw	26	; case 48
  2071  000CCA  B4D8               	btfsc	status,2,c
  2072  000CCC  D6E0               	goto	l953
  2073  000CCE  0A01               	xorlw	1	; case 49
  2074  000CD0  B4D8               	btfsc	status,2,c
  2075  000CD2  D6F3               	goto	l955
  2076  000CD4  0A03               	xorlw	3	; case 50
  2077  000CD6  B4D8               	btfsc	status,2,c
  2078  000CD8  D706               	goto	l957
  2079  000CDA  0A01               	xorlw	1	; case 51
  2080  000CDC  B4D8               	btfsc	status,2,c
  2081  000CDE  D719               	goto	l959
  2082  000CE0  0A07               	xorlw	7	; case 52
  2083  000CE2  B4D8               	btfsc	status,2,c
  2084  000CE4  D72C               	goto	l961
  2085  000CE6  0A01               	xorlw	1	; case 53
  2086  000CE8  B4D8               	btfsc	status,2,c
  2087  000CEA  D73F               	goto	l963
  2088  000CEC  0A03               	xorlw	3	; case 54
  2089  000CEE  B4D8               	btfsc	status,2,c
  2090  000CF0  D752               	goto	l965
  2091  000CF2  0A01               	xorlw	1	; case 55
  2092  000CF4  B4D8               	btfsc	status,2,c
  2093  000CF6  D765               	goto	l967
  2094  000CF8  0A0F               	xorlw	15	; case 56
  2095  000CFA  B4D8               	btfsc	status,2,c
  2096  000CFC  D778               	goto	l969
  2097  000CFE  0A01               	xorlw	1	; case 57
  2098  000D00  B4D8               	btfsc	status,2,c
  2099  000D02  D78B               	goto	l971
  2100  000D04  0A78               	xorlw	120	; case 65
  2101  000D06  B4D8               	btfsc	status,2,c
  2102  000D08  D486               	goto	l901
  2103  000D0A  0A03               	xorlw	3	; case 66
  2104  000D0C  B4D8               	btfsc	status,2,c
  2105  000D0E  D499               	goto	l903
  2106  000D10  0A01               	xorlw	1	; case 67
  2107  000D12  B4D8               	btfsc	status,2,c
  2108  000D14  D4AC               	goto	l905
  2109  000D16  0A07               	xorlw	7	; case 68
  2110  000D18  B4D8               	btfsc	status,2,c
  2111  000D1A  D4BF               	goto	l907
  2112  000D1C  0A01               	xorlw	1	; case 69
  2113  000D1E  B4D8               	btfsc	status,2,c
  2114  000D20  D4D2               	goto	l909
  2115  000D22  0A03               	xorlw	3	; case 70
  2116  000D24  B4D8               	btfsc	status,2,c
  2117  000D26  D4E5               	goto	l911
  2118  000D28  0A01               	xorlw	1	; case 71
  2119  000D2A  B4D8               	btfsc	status,2,c
  2120  000D2C  D4F8               	goto	l913
  2121  000D2E  0A0F               	xorlw	15	; case 72
  2122  000D30  B4D8               	btfsc	status,2,c
  2123  000D32  D50B               	goto	l915
  2124  000D34  0A01               	xorlw	1	; case 73
  2125  000D36  B4D8               	btfsc	status,2,c
  2126  000D38  D51E               	goto	l917
  2127  000D3A  0A03               	xorlw	3	; case 74
  2128  000D3C  B4D8               	btfsc	status,2,c
  2129  000D3E  D531               	goto	l919
  2130  000D40  0A01               	xorlw	1	; case 75
  2131  000D42  B4D8               	btfsc	status,2,c
  2132  000D44  D544               	goto	l921
  2133  000D46  0A07               	xorlw	7	; case 76
  2134  000D48  B4D8               	btfsc	status,2,c
  2135  000D4A  D557               	goto	l923
  2136  000D4C  0A01               	xorlw	1	; case 77
  2137  000D4E  B4D8               	btfsc	status,2,c
  2138  000D50  D56A               	goto	l925
  2139  000D52  0A03               	xorlw	3	; case 78
  2140  000D54  B4D8               	btfsc	status,2,c
  2141  000D56  D57D               	goto	l927
  2142  000D58  0A01               	xorlw	1	; case 79
  2143  000D5A  B4D8               	btfsc	status,2,c
  2144  000D5C  D590               	goto	l929
  2145  000D5E  0A1F               	xorlw	31	; case 80
  2146  000D60  B4D8               	btfsc	status,2,c
  2147  000D62  D5A3               	goto	l931
  2148  000D64  0A01               	xorlw	1	; case 81
  2149  000D66  B4D8               	btfsc	status,2,c
  2150  000D68  D5B6               	goto	l933
  2151  000D6A  0A03               	xorlw	3	; case 82
  2152  000D6C  B4D8               	btfsc	status,2,c
  2153  000D6E  D5C9               	goto	l935
  2154  000D70  0A01               	xorlw	1	; case 83
  2155  000D72  B4D8               	btfsc	status,2,c
  2156  000D74  D5DC               	goto	l937
  2157  000D76  0A07               	xorlw	7	; case 84
  2158  000D78  B4D8               	btfsc	status,2,c
  2159  000D7A  D5EF               	goto	l939
  2160  000D7C  0A01               	xorlw	1	; case 85
  2161  000D7E  B4D8               	btfsc	status,2,c
  2162  000D80  D602               	goto	l941
  2163  000D82  0A03               	xorlw	3	; case 86
  2164  000D84  B4D8               	btfsc	status,2,c
  2165  000D86  D615               	goto	l943
  2166  000D88  0A01               	xorlw	1	; case 87
  2167  000D8A  B4D8               	btfsc	status,2,c
  2168  000D8C  D628               	goto	l945
  2169  000D8E  0A0F               	xorlw	15	; case 88
  2170  000D90  B4D8               	btfsc	status,2,c
  2171  000D92  D63B               	goto	l947
  2172  000D94  0A01               	xorlw	1	; case 89
  2173  000D96  B4D8               	btfsc	status,2,c
  2174  000D98  D64E               	goto	l949
  2175  000D9A  0A03               	xorlw	3	; case 90
  2176  000D9C  B4D8               	btfsc	status,2,c
  2177  000D9E  D661               	goto	l951
  2178  000DA0  0A26               	xorlw	38	; case 124
  2179  000DA2  A4D8               	btfss	status,2,c
  2180  000DA4  0012               	return	
  2181  000DA6  D75F               	goto	l975
  2182  000DA8                     __end_of_glcd_text:
  2183                           	opt stack 0
  2184                           tblptru	equ	0xFF8
  2185                           tblptrh	equ	0xFF7
  2186                           tblptrl	equ	0xFF6
  2187                           tablat	equ	0xFF5
  2188                           prodh	equ	0xFF4
  2189                           prodl	equ	0xFF3
  2190                           wreg	equ	0xFE8
  2191                           indf2	equ	0xFDF
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function ___lwmod *****************
  2197 ;; Defined at:
  2198 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  dividend        2    0[COMRAM] unsigned int 
  2201 ;;  divisor         2    2[COMRAM] unsigned int 
  2202 ;; Auto vars:     Size  Location     Type
  2203 ;;  counter         1    4[COMRAM] unsigned char 
  2204 ;; Return value:  Size  Location     Type
  2205 ;;                  2    0[COMRAM] unsigned int 
  2206 ;; Registers used:
  2207 ;;		wreg, status,2, status,0
  2208 ;; Tracked objects:
  2209 ;;		On entry : 0/0
  2210 ;;		On exit  : 0/0
  2211 ;;		Unchanged: 0/0
  2212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2213 ;;      Params:         4       0       0       0       0       0       0
  2214 ;;      Locals:         1       0       0       0       0       0       0
  2215 ;;      Temps:          0       0       0       0       0       0       0
  2216 ;;      Totals:         5       0       0       0       0       0       0
  2217 ;;Total ram usage:        5 bytes
  2218 ;; Hardware stack levels used:    1
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_glcd_num
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text5
  2227  000FE0                     __ptext5:
  2228                           	opt stack 0
  2229  000FE0                     ___lwmod:
  2230                           	opt stack 29
  2231                           
  2232                           ;incstack = 0
  2233  000FE0  5003               	movf	___lwmod@divisor,w,c
  2234  000FE2  1004               	iorwf	___lwmod@divisor+1,w,c
  2235  000FE4  B4D8               	btfsc	status,2,c
  2236  000FE6  D018               	goto	l598
  2237  000FE8  0E01               	movlw	1
  2238  000FEA  6E05               	movwf	___lwmod@counter,c
  2239  000FEC  D004               	goto	l1307
  2240  000FEE                     l1305:
  2241  000FEE  90D8               	bcf	status,0,c
  2242  000FF0  3603               	rlcf	___lwmod@divisor,f,c
  2243  000FF2  3604               	rlcf	___lwmod@divisor+1,f,c
  2244  000FF4  2A05               	incf	___lwmod@counter,f,c
  2245  000FF6                     l1307:
  2246  000FF6  AE04               	btfss	___lwmod@divisor+1,7,c
  2247  000FF8  D7FA               	goto	l1305
  2248  000FFA                     l1309:
  2249  000FFA  5003               	movf	___lwmod@divisor,w,c
  2250  000FFC  5C01               	subwf	___lwmod@dividend,w,c
  2251  000FFE  5004               	movf	___lwmod@divisor+1,w,c
  2252  001000  5802               	subwfb	___lwmod@dividend+1,w,c
  2253  001002  A0D8               	btfss	status,0,c
  2254  001004  D004               	goto	l1313
  2255  001006  5003               	movf	___lwmod@divisor,w,c
  2256  001008  5E01               	subwf	___lwmod@dividend,f,c
  2257  00100A  5004               	movf	___lwmod@divisor+1,w,c
  2258  00100C  5A02               	subwfb	___lwmod@dividend+1,f,c
  2259  00100E                     l1313:
  2260  00100E  90D8               	bcf	status,0,c
  2261  001010  3204               	rrcf	___lwmod@divisor+1,f,c
  2262  001012  3203               	rrcf	___lwmod@divisor,f,c
  2263  001014  2E05               	decfsz	___lwmod@counter,f,c
  2264  001016  D7F1               	goto	l1309
  2265  001018                     l598:
  2266  001018  C001  F001         	movff	___lwmod@dividend,?___lwmod
  2267  00101C  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
  2268  001020  0012               	return		;funcret
  2269  001022                     __end_of___lwmod:
  2270                           	opt stack 0
  2271                           tblptru	equ	0xFF8
  2272                           tblptrh	equ	0xFF7
  2273                           tblptrl	equ	0xFF6
  2274                           tablat	equ	0xFF5
  2275                           prodh	equ	0xFF4
  2276                           prodl	equ	0xFF3
  2277                           wreg	equ	0xFE8
  2278                           indf2	equ	0xFDF
  2279                           fsr2h	equ	0xFDA
  2280                           fsr2l	equ	0xFD9
  2281                           status	equ	0xFD8
  2282                           
  2283 ;; *************** function ___lwdiv *****************
  2284 ;; Defined at:
  2285 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  dividend        2    0[COMRAM] unsigned int 
  2288 ;;  divisor         2    2[COMRAM] unsigned int 
  2289 ;; Auto vars:     Size  Location     Type
  2290 ;;  quotient        2    4[COMRAM] unsigned int 
  2291 ;;  counter         1    6[COMRAM] unsigned char 
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  2    0[COMRAM] unsigned int 
  2294 ;; Registers used:
  2295 ;;		wreg, status,2, status,0
  2296 ;; Tracked objects:
  2297 ;;		On entry : 0/0
  2298 ;;		On exit  : 0/0
  2299 ;;		Unchanged: 0/0
  2300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2301 ;;      Params:         4       0       0       0       0       0       0
  2302 ;;      Locals:         3       0       0       0       0       0       0
  2303 ;;      Temps:          0       0       0       0       0       0       0
  2304 ;;      Totals:         7       0       0       0       0       0       0
  2305 ;;Total ram usage:        7 bytes
  2306 ;; Hardware stack levels used:    1
  2307 ;; This function calls:
  2308 ;;		Nothing
  2309 ;; This function is called by:
  2310 ;;		_glcd_num
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           	psect	text6
  2315  000F8E                     __ptext6:
  2316                           	opt stack 0
  2317  000F8E                     ___lwdiv:
  2318                           	opt stack 29
  2319                           
  2320                           ;incstack = 0
  2321  000F8E  0E00               	movlw	0
  2322  000F90  6E06               	movwf	___lwdiv@quotient+1,c
  2323  000F92  0E00               	movlw	0
  2324  000F94  6E05               	movwf	___lwdiv@quotient,c
  2325  000F96  5003               	movf	___lwdiv@divisor,w,c
  2326  000F98  1004               	iorwf	___lwdiv@divisor+1,w,c
  2327  000F9A  B4D8               	btfsc	status,2,c
  2328  000F9C  D01C               	goto	l588
  2329  000F9E  0E01               	movlw	1
  2330  000FA0  6E07               	movwf	___lwdiv@counter,c
  2331  000FA2  D004               	goto	l1287
  2332  000FA4                     l1285:
  2333  000FA4  90D8               	bcf	status,0,c
  2334  000FA6  3603               	rlcf	___lwdiv@divisor,f,c
  2335  000FA8  3604               	rlcf	___lwdiv@divisor+1,f,c
  2336  000FAA  2A07               	incf	___lwdiv@counter,f,c
  2337  000FAC                     l1287:
  2338  000FAC  AE04               	btfss	___lwdiv@divisor+1,7,c
  2339  000FAE  D7FA               	goto	l1285
  2340  000FB0                     l1289:
  2341  000FB0  90D8               	bcf	status,0,c
  2342  000FB2  3605               	rlcf	___lwdiv@quotient,f,c
  2343  000FB4  3606               	rlcf	___lwdiv@quotient+1,f,c
  2344  000FB6  5003               	movf	___lwdiv@divisor,w,c
  2345  000FB8  5C01               	subwf	___lwdiv@dividend,w,c
  2346  000FBA  5004               	movf	___lwdiv@divisor+1,w,c
  2347  000FBC  5802               	subwfb	___lwdiv@dividend+1,w,c
  2348  000FBE  A0D8               	btfss	status,0,c
  2349  000FC0  D005               	goto	l1297
  2350  000FC2  5003               	movf	___lwdiv@divisor,w,c
  2351  000FC4  5E01               	subwf	___lwdiv@dividend,f,c
  2352  000FC6  5004               	movf	___lwdiv@divisor+1,w,c
  2353  000FC8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2354  000FCA  8005               	bsf	___lwdiv@quotient,0,c
  2355  000FCC                     l1297:
  2356  000FCC  90D8               	bcf	status,0,c
  2357  000FCE  3204               	rrcf	___lwdiv@divisor+1,f,c
  2358  000FD0  3203               	rrcf	___lwdiv@divisor,f,c
  2359  000FD2  2E07               	decfsz	___lwdiv@counter,f,c
  2360  000FD4  D7ED               	goto	l1289
  2361  000FD6                     l588:
  2362  000FD6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  2363  000FDA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2364  000FDE  0012               	return		;funcret
  2365  000FE0                     __end_of___lwdiv:
  2366                           	opt stack 0
  2367                           tblptru	equ	0xFF8
  2368                           tblptrh	equ	0xFF7
  2369                           tblptrl	equ	0xFF6
  2370                           tablat	equ	0xFF5
  2371                           prodh	equ	0xFF4
  2372                           prodl	equ	0xFF3
  2373                           wreg	equ	0xFE8
  2374                           indf2	equ	0xFDF
  2375                           fsr2h	equ	0xFDA
  2376                           fsr2l	equ	0xFD9
  2377                           status	equ	0xFD8
  2378                           
  2379 ;; *************** function _glcd_clear *****************
  2380 ;; Defined at:
  2381 ;;		line 150 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;  m               2    7[COMRAM] unsigned short 
  2386 ;; Return value:  Size  Location     Type
  2387 ;;                  1    wreg      void 
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, status,0, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2395 ;;      Params:         0       0       0       0       0       0       0
  2396 ;;      Locals:         2       0       0       0       0       0       0
  2397 ;;      Temps:          0       0       0       0       0       0       0
  2398 ;;      Totals:         2       0       0       0       0       0       0
  2399 ;;Total ram usage:        2 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; Hardware stack levels required when called:    4
  2402 ;; This function calls:
  2403 ;;		_glcd_clear_line
  2404 ;; This function is called by:
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           	psect	text7
  2410  0010FC                     __ptext7:
  2411                           	opt stack 0
  2412  0010FC                     _glcd_clear:
  2413                           	opt stack 26
  2414                           
  2415                           ;glcd.h: 152: unsigned short m;
  2416                           ;glcd.h: 153: for(m=0;m<8;m++)
  2417                           
  2418                           ;incstack = 0
  2419  0010FC  0E00               	movlw	0
  2420  0010FE  6E09               	movwf	glcd_clear@m+1,c
  2421  001100  0E00               	movlw	0
  2422  001102  6E08               	movwf	glcd_clear@m,c
  2423  001104                     l1319:
  2424  001104  5009               	movf	glcd_clear@m+1,w,c
  2425  001106  E10A               	bnz	l59
  2426  001108  0E08               	movlw	8
  2427  00110A  5C08               	subwf	glcd_clear@m,w,c
  2428  00110C  B0D8               	btfsc	status,0,c
  2429  00110E  0012               	return	
  2430                           
  2431                           ;glcd.h: 154: {
  2432                           ;glcd.h: 155: glcd_clear_line(m);
  2433  001110  5008               	movf	glcd_clear@m,w,c
  2434  001112  EC32  F008         	call	_glcd_clear_line
  2435  001116  4A08               	infsnz	glcd_clear@m,f,c
  2436  001118  2A09               	incf	glcd_clear@m+1,f,c
  2437  00111A  D7F4               	goto	l1319
  2438  00111C                     l59:
  2439  00111C  0012               	return		;funcret
  2440  00111E                     __end_of_glcd_clear:
  2441                           	opt stack 0
  2442                           tblptru	equ	0xFF8
  2443                           tblptrh	equ	0xFF7
  2444                           tblptrl	equ	0xFF6
  2445                           tablat	equ	0xFF5
  2446                           prodh	equ	0xFF4
  2447                           prodl	equ	0xFF3
  2448                           wreg	equ	0xFE8
  2449                           indf2	equ	0xFDF
  2450                           fsr2h	equ	0xFDA
  2451                           fsr2l	equ	0xFD9
  2452                           status	equ	0xFD8
  2453                           
  2454 ;; *************** function _glcd_clear_line *****************
  2455 ;; Defined at:
  2456 ;;		line 140 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;  ln              1    wreg     unsigned char 
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  ln              1    4[COMRAM] unsigned char 
  2461 ;;  i               2    5[COMRAM] int 
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, status,2, status,0, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2471 ;;      Params:         0       0       0       0       0       0       0
  2472 ;;      Locals:         3       0       0       0       0       0       0
  2473 ;;      Temps:          0       0       0       0       0       0       0
  2474 ;;      Totals:         3       0       0       0       0       0       0
  2475 ;;Total ram usage:        3 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    3
  2478 ;; This function calls:
  2479 ;;		_glcd_write
  2480 ;;		_goto_xy
  2481 ;; This function is called by:
  2482 ;;		_glcd_clear
  2483 ;; This function uses a non-reentrant model
  2484 ;;
  2485                           
  2486                           	psect	text8
  2487  001064                     __ptext8:
  2488                           	opt stack 0
  2489  001064                     _glcd_clear_line:
  2490                           	opt stack 26
  2491                           
  2492                           ;incstack = 0
  2493                           ;glcd_clear_line@ln stored from wreg
  2494  001064  6E05               	movwf	glcd_clear_line@ln,c
  2495                           
  2496                           ;glcd.h: 142: int i;
  2497                           ;glcd.h: 143: goto_xy(0,ln);
  2498  001066  C005  F003         	movff	glcd_clear_line@ln,goto_xy@y
  2499  00106A  0E00               	movlw	0
  2500  00106C  ECB2  F008         	call	_goto_xy
  2501                           
  2502                           ;glcd.h: 144: goto_xy(64,ln);
  2503  001070  C005  F003         	movff	glcd_clear_line@ln,goto_xy@y
  2504  001074  0E40               	movlw	64
  2505  001076  ECB2  F008         	call	_goto_xy
  2506                           
  2507                           ;glcd.h: 145: PORTBbits.RB4 = 1;
  2508  00107A  8881               	bsf	3969,4,c	;volatile
  2509                           
  2510                           ;glcd.h: 146: for(i=0;i<65;i++)
  2511  00107C  0E00               	movlw	0
  2512  00107E  6E07               	movwf	glcd_clear_line@i+1,c
  2513  001080  0E00               	movlw	0
  2514  001082  6E06               	movwf	glcd_clear_line@i,c
  2515  001084                     l1255:
  2516  001084  BE07               	btfsc	glcd_clear_line@i+1,7,c
  2517  001086  D006               	goto	l1259
  2518  001088  5007               	movf	glcd_clear_line@i+1,w,c
  2519  00108A  E10A               	bnz	l54
  2520  00108C  0E41               	movlw	65
  2521  00108E  5C06               	subwf	glcd_clear_line@i,w,c
  2522  001090  B0D8               	btfsc	status,0,c
  2523  001092  0012               	return	
  2524  001094                     l1259:
  2525                           
  2526                           ;glcd.h: 147: glcd_write(0);
  2527  001094  0E00               	movlw	0
  2528  001096  EC9B  F008         	call	_glcd_write
  2529  00109A  4A06               	infsnz	glcd_clear_line@i,f,c
  2530  00109C  2A07               	incf	glcd_clear_line@i+1,f,c
  2531  00109E  D7F2               	goto	l1255
  2532  0010A0                     l54:
  2533  0010A0  0012               	return		;funcret
  2534  0010A2                     __end_of_glcd_clear_line:
  2535                           	opt stack 0
  2536                           tblptru	equ	0xFF8
  2537                           tblptrh	equ	0xFF7
  2538                           tblptrl	equ	0xFF6
  2539                           tablat	equ	0xFF5
  2540                           prodh	equ	0xFF4
  2541                           prodl	equ	0xFF3
  2542                           wreg	equ	0xFE8
  2543                           indf2	equ	0xFDF
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548 ;; *************** function _goto_xy *****************
  2549 ;; Defined at:
  2550 ;;		line 125 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  x               1    wreg     unsigned char 
  2553 ;;  y               1    2[COMRAM] unsigned char 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  x               1    3[COMRAM] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2565 ;;      Params:         1       0       0       0       0       0       0
  2566 ;;      Locals:         1       0       0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0       0       0
  2568 ;;      Totals:         2       0       0       0       0       0       0
  2569 ;;Total ram usage:        2 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    2
  2572 ;; This function calls:
  2573 ;;		_goto_col
  2574 ;;		_goto_row
  2575 ;; This function is called by:
  2576 ;;		_glcd_clear_line
  2577 ;;		_main
  2578 ;;		_glcd_draw_pixel
  2579 ;; This function uses a non-reentrant model
  2580 ;;
  2581                           
  2582                           	psect	text9
  2583  001164                     __ptext9:
  2584                           	opt stack 0
  2585  001164                     _goto_xy:
  2586                           	opt stack 28
  2587                           
  2588                           ;incstack = 0
  2589                           ;goto_xy@x stored from wreg
  2590  001164  6E04               	movwf	goto_xy@x,c
  2591                           
  2592                           ;glcd.h: 127: goto_col(x);
  2593  001166  5004               	movf	goto_xy@x,w,c
  2594  001168  EC51  F008         	call	_goto_col
  2595                           
  2596                           ;glcd.h: 128: goto_row(y);
  2597  00116C  5003               	movf	goto_xy@y,w,c
  2598  00116E  EC8F  F008         	call	_goto_row
  2599  001172  0012               	return		;funcret
  2600  001174                     __end_of_goto_xy:
  2601                           	opt stack 0
  2602                           tblptru	equ	0xFF8
  2603                           tblptrh	equ	0xFF7
  2604                           tblptrl	equ	0xFF6
  2605                           tablat	equ	0xFF5
  2606                           prodh	equ	0xFF4
  2607                           prodl	equ	0xFF3
  2608                           wreg	equ	0xFE8
  2609                           indf2	equ	0xFDF
  2610                           fsr2h	equ	0xFDA
  2611                           fsr2l	equ	0xFD9
  2612                           status	equ	0xFD8
  2613                           
  2614 ;; *************** function _goto_row *****************
  2615 ;; Defined at:
  2616 ;;		line 115 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2617 ;; Parameters:    Size  Location     Type
  2618 ;;  row             1    wreg     unsigned char 
  2619 ;; Auto vars:     Size  Location     Type
  2620 ;;  row             1    0[COMRAM] unsigned char 
  2621 ;;  Col_Data        1    1[COMRAM] unsigned char 
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0, cstack
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2631 ;;      Params:         0       0       0       0       0       0       0
  2632 ;;      Locals:         2       0       0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0
  2634 ;;      Totals:         2       0       0       0       0       0       0
  2635 ;;Total ram usage:        2 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    1
  2638 ;; This function calls:
  2639 ;;		_enable_pulse
  2640 ;; This function is called by:
  2641 ;;		_goto_xy
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text10
  2646  00111E                     __ptext10:
  2647                           	opt stack 0
  2648  00111E                     _goto_row:
  2649                           	opt stack 28
  2650                           
  2651                           ;incstack = 0
  2652                           ;goto_row@row stored from wreg
  2653  00111E  6E01               	movwf	goto_row@row,c
  2654                           
  2655                           ;glcd.h: 117: unsigned char Col_Data;
  2656                           ;glcd.h: 118: PORTBbits.RB0 = 0;
  2657  001120  9081               	bcf	3969,0,c	;volatile
  2658                           
  2659                           ;glcd.h: 119: PORTBbits.RB1 = 0;
  2660  001122  9281               	bcf	3969,1,c	;volatile
  2661                           
  2662                           ;glcd.h: 120: Col_Data = (row | 0xB8 ) & 0xBF;
  2663  001124  5001               	movf	goto_row@row,w,c
  2664  001126  09B8               	iorlw	184
  2665  001128  0BBF               	andlw	191
  2666  00112A  6E02               	movwf	goto_row@Col_Data,c
  2667                           
  2668                           ;glcd.h: 121: PORTD = Col_Data;
  2669  00112C  C002  FF83         	movff	goto_row@Col_Data,3971	;volatile
  2670                           
  2671                           ;glcd.h: 122: enable_pulse();
  2672  001130  ECA7  F008         	call	_enable_pulse	;wreg free
  2673  001134  0012               	return		;funcret
  2674  001136                     __end_of_goto_row:
  2675                           	opt stack 0
  2676                           tblptru	equ	0xFF8
  2677                           tblptrh	equ	0xFF7
  2678                           tblptrl	equ	0xFF6
  2679                           tablat	equ	0xFF5
  2680                           prodh	equ	0xFF4
  2681                           prodl	equ	0xFF3
  2682                           wreg	equ	0xFE8
  2683                           indf2	equ	0xFDF
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _goto_col *****************
  2689 ;; Defined at:
  2690 ;;		line 92 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;  col             1    wreg     unsigned char 
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  col             1    1[COMRAM] unsigned char 
  2695 ;;  Col_Data        1    0[COMRAM] unsigned char 
  2696 ;; Return value:  Size  Location     Type
  2697 ;;                  1    wreg      void 
  2698 ;; Registers used:
  2699 ;;		wreg, status,2, status,0, cstack
  2700 ;; Tracked objects:
  2701 ;;		On entry : 0/0
  2702 ;;		On exit  : 0/0
  2703 ;;		Unchanged: 0/0
  2704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2705 ;;      Params:         0       0       0       0       0       0       0
  2706 ;;      Locals:         2       0       0       0       0       0       0
  2707 ;;      Temps:          0       0       0       0       0       0       0
  2708 ;;      Totals:         2       0       0       0       0       0       0
  2709 ;;Total ram usage:        2 bytes
  2710 ;; Hardware stack levels used:    1
  2711 ;; Hardware stack levels required when called:    1
  2712 ;; This function calls:
  2713 ;;		_enable_pulse
  2714 ;; This function is called by:
  2715 ;;		_goto_xy
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text11
  2720  0010A2                     __ptext11:
  2721                           	opt stack 0
  2722  0010A2                     _goto_col:
  2723                           	opt stack 28
  2724                           
  2725                           ;incstack = 0
  2726                           ;goto_col@col stored from wreg
  2727  0010A2  6E02               	movwf	goto_col@col,c
  2728                           
  2729                           ;glcd.h: 94: unsigned char Col_Data;
  2730                           ;glcd.h: 95: PORTBbits.RB0 = 0;
  2731  0010A4  9081               	bcf	3969,0,c	;volatile
  2732                           
  2733                           ;glcd.h: 96: PORTBbits.RB1 = 0;
  2734  0010A6  9281               	bcf	3969,1,c	;volatile
  2735                           
  2736                           ;glcd.h: 97: if(col<64)
  2737  0010A8  0E40               	movlw	64
  2738  0010AA  6002               	cpfslt	goto_col@col,c
  2739  0010AC  D005               	goto	l38
  2740                           
  2741                           ;glcd.h: 98: {
  2742                           ;glcd.h: 99: PORTBbits.RB4 = 1;
  2743  0010AE  8881               	bsf	3969,4,c	;volatile
  2744                           
  2745                           ;glcd.h: 100: PORTBbits.RB5 = 0;
  2746  0010B0  9A81               	bcf	3969,5,c	;volatile
  2747                           
  2748                           ;glcd.h: 101: Col_Data = col;
  2749  0010B2  C002  F001         	movff	goto_col@col,goto_col@Col_Data
  2750                           
  2751                           ;glcd.h: 102: }
  2752  0010B6  D005               	goto	l39
  2753  0010B8                     l38:
  2754                           
  2755                           ;glcd.h: 103: else
  2756                           ;glcd.h: 104: {
  2757                           ;glcd.h: 106: PORTBbits.RB5 = 1;
  2758  0010B8  8A81               	bsf	3969,5,c	;volatile
  2759                           
  2760                           ;glcd.h: 107: PORTBbits.RB4 = 0;
  2761  0010BA  9881               	bcf	3969,4,c	;volatile
  2762                           
  2763                           ;glcd.h: 108: Col_Data = col-64;
  2764  0010BC  5002               	movf	goto_col@col,w,c
  2765  0010BE  0FC0               	addlw	192
  2766  0010C0  6E01               	movwf	goto_col@Col_Data,c
  2767  0010C2                     l39:
  2768                           
  2769                           ;glcd.h: 109: }
  2770                           ;glcd.h: 110: Col_Data = (Col_Data | 0x40 ) & 0x7F;
  2771  0010C2  5001               	movf	goto_col@Col_Data,w,c
  2772  0010C4  0940               	iorlw	64
  2773  0010C6  0B7F               	andlw	127
  2774  0010C8  6E01               	movwf	goto_col@Col_Data,c
  2775                           
  2776                           ;glcd.h: 111: PORTD = Col_Data;
  2777  0010CA  C001  FF83         	movff	goto_col@Col_Data,3971	;volatile
  2778                           
  2779                           ;glcd.h: 112: enable_pulse();
  2780  0010CE  ECA7  F008         	call	_enable_pulse	;wreg free
  2781  0010D2  0012               	return		;funcret
  2782  0010D4                     __end_of_goto_col:
  2783                           	opt stack 0
  2784                           tblptru	equ	0xFF8
  2785                           tblptrh	equ	0xFF7
  2786                           tblptrl	equ	0xFF6
  2787                           tablat	equ	0xFF5
  2788                           prodh	equ	0xFF4
  2789                           prodl	equ	0xFF3
  2790                           wreg	equ	0xFE8
  2791                           indf2	equ	0xFDF
  2792                           fsr2h	equ	0xFDA
  2793                           fsr2l	equ	0xFD9
  2794                           status	equ	0xFD8
  2795                           
  2796 ;; *************** function _glcd_write *****************
  2797 ;; Defined at:
  2798 ;;		line 131 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;  data            1    wreg     unsigned char 
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;  data            1    0[COMRAM] unsigned char 
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      void 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2, cstack
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2812 ;;      Params:         0       0       0       0       0       0       0
  2813 ;;      Locals:         1       0       0       0       0       0       0
  2814 ;;      Temps:          0       0       0       0       0       0       0
  2815 ;;      Totals:         1       0       0       0       0       0       0
  2816 ;;Total ram usage:        1 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    1
  2819 ;; This function calls:
  2820 ;;		_enable_pulse
  2821 ;; This function is called by:
  2822 ;;		_glcd_clear_line
  2823 ;;		_glcd_text
  2824 ;;		_glcd_draw_pixel
  2825 ;; This function uses a non-reentrant model
  2826 ;;
  2827                           
  2828                           	psect	text12
  2829  001136                     __ptext12:
  2830                           	opt stack 0
  2831  001136                     _glcd_write:
  2832                           	opt stack 27
  2833                           
  2834                           ;incstack = 0
  2835                           ;glcd_write@data stored from wreg
  2836  001136  6E01               	movwf	glcd_write@data,c
  2837                           
  2838                           ;glcd.h: 133: PORTBbits.RB0 = 1;
  2839  001138  8081               	bsf	3969,0,c	;volatile
  2840                           
  2841                           ;glcd.h: 134: PORTBbits.RB1 = 0;
  2842  00113A  9281               	bcf	3969,1,c	;volatile
  2843                           
  2844                           ;glcd.h: 135: PORTD = data;
  2845  00113C  C001  FF83         	movff	glcd_write@data,3971	;volatile
  2846                           
  2847                           ;glcd.h: 136: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2848  001140  0E06               	movlw	6
  2849  001142                     u737:
  2850  001142  2EE8               	decfsz	wreg,f,c
  2851  001144  D7FE               	bra	u737
  2852  001146  D000               	nop2	
  2853                           
  2854                           ;glcd.h: 137: enable_pulse();
  2855  001148  ECA7  F008         	call	_enable_pulse	;wreg free
  2856  00114C  0012               	return		;funcret
  2857  00114E                     __end_of_glcd_write:
  2858                           	opt stack 0
  2859                           tblptru	equ	0xFF8
  2860                           tblptrh	equ	0xFF7
  2861                           tblptrl	equ	0xFF6
  2862                           tablat	equ	0xFF5
  2863                           prodh	equ	0xFF4
  2864                           prodl	equ	0xFF3
  2865                           wreg	equ	0xFE8
  2866                           indf2	equ	0xFDF
  2867                           fsr2h	equ	0xFDA
  2868                           fsr2l	equ	0xFD9
  2869                           status	equ	0xFD8
  2870                           
  2871 ;; *************** function _enable_pulse *****************
  2872 ;; Defined at:
  2873 ;;		line 55 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/glcd.h"
  2874 ;; Parameters:    Size  Location     Type
  2875 ;;		None
  2876 ;; Auto vars:     Size  Location     Type
  2877 ;;		None
  2878 ;; Return value:  Size  Location     Type
  2879 ;;                  1    wreg      void 
  2880 ;; Registers used:
  2881 ;;		wreg
  2882 ;; Tracked objects:
  2883 ;;		On entry : 0/0
  2884 ;;		On exit  : 0/0
  2885 ;;		Unchanged: 0/0
  2886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2887 ;;      Params:         0       0       0       0       0       0       0
  2888 ;;      Locals:         0       0       0       0       0       0       0
  2889 ;;      Temps:          0       0       0       0       0       0       0
  2890 ;;      Totals:         0       0       0       0       0       0       0
  2891 ;;Total ram usage:        0 bytes
  2892 ;; Hardware stack levels used:    1
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_glcd_on
  2897 ;;		_goto_col
  2898 ;;		_goto_row
  2899 ;;		_glcd_write
  2900 ;;		_set_start_line
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text13
  2905  00114E                     __ptext13:
  2906                           	opt stack 0
  2907  00114E                     _enable_pulse:
  2908                           	opt stack 28
  2909                           
  2910                           ;glcd.h: 57: PORTBbits.RB2 = 1;
  2911                           
  2912                           ;incstack = 0
  2913  00114E  8481               	bsf	3969,2,c	;volatile
  2914                           
  2915                           ;glcd.h: 58: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2916  001150  0E06               	movlw	6
  2917  001152                     u747:
  2918  001152  2EE8               	decfsz	wreg,f,c
  2919  001154  D7FE               	bra	u747
  2920  001156  D000               	nop2	
  2921                           
  2922                           ;glcd.h: 59: PORTBbits.RB2 = 0;
  2923  001158  9481               	bcf	3969,2,c	;volatile
  2924                           
  2925                           ;glcd.h: 60: _delay((unsigned long)((5)*(16000000/4000000.0)));
  2926  00115A  0E06               	movlw	6
  2927  00115C                     u757:
  2928  00115C  2EE8               	decfsz	wreg,f,c
  2929  00115E  D7FE               	bra	u757
  2930  001160  D000               	nop2	
  2931  001162  0012               	return		;funcret
  2932  001164                     __end_of_enable_pulse:
  2933                           	opt stack 0
  2934                           tblptru	equ	0xFF8
  2935                           tblptrh	equ	0xFF7
  2936                           tblptrl	equ	0xFF6
  2937                           tablat	equ	0xFF5
  2938                           prodh	equ	0xFF4
  2939                           prodl	equ	0xFF3
  2940                           wreg	equ	0xFE8
  2941                           indf2	equ	0xFDF
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _adc_read *****************
  2947 ;; Defined at:
  2948 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/adc45k22.h"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  channel         1    wreg     unsigned char 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  channel         1    3[COMRAM] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  2    0[COMRAM] unsigned int 
  2955 ;; Registers used:
  2956 ;;		wreg, status,2, status,0
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2962 ;;      Params:         2       0       0       0       0       0       0
  2963 ;;      Locals:         1       0       0       0       0       0       0
  2964 ;;      Temps:          1       0       0       0       0       0       0
  2965 ;;      Totals:         4       0       0       0       0       0       0
  2966 ;;Total ram usage:        4 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_main
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text14
  2976  001022                     __ptext14:
  2977                           	opt stack 0
  2978  001022                     _adc_read:
  2979                           	opt stack 30
  2980                           
  2981                           ;incstack = 0
  2982                           ;adc_read@channel stored from wreg
  2983  001022  6E04               	movwf	adc_read@channel,c
  2984                           
  2985                           ;adc45k22.h: 13: if(channel>5)
  2986  001024  0E05               	movlw	5
  2987  001026  6404               	cpfsgt	adc_read@channel,c
  2988  001028  D005               	goto	l1439
  2989                           
  2990                           ;adc45k22.h: 14: return 0;
  2991  00102A  0E00               	movlw	0
  2992  00102C  6E02               	movwf	?_adc_read+1,c
  2993  00102E  0E00               	movlw	0
  2994  001030  6E01               	movwf	?_adc_read,c
  2995  001032  0012               	return	
  2996  001034                     l1439:
  2997                           
  2998                           ;adc45k22.h: 15: ADCON0 = 0x00;
  2999  001034  0E00               	movlw	0
  3000  001036  6EC2               	movwf	4034,c	;volatile
  3001                           
  3002                           ;adc45k22.h: 16: ADON = 1;
  3003  001038  80C2               	bsf	4034,0,c	;volatile
  3004                           
  3005                           ;adc45k22.h: 17: ADCON0 |= (channel<<2);
  3006  00103A  4404               	rlncf	adc_read@channel,w,c
  3007  00103C  46E8               	rlncf	wreg,f,c
  3008  00103E  0BFC               	andlw	252
  3009  001040  12C2               	iorwf	4034,f,c	;volatile
  3010                           
  3011                           ;adc45k22.h: 18: _delay((unsigned long)((2)*(16000000/4000.0)));
  3012  001042  0E0B               	movlw	11
  3013  001044  6E03               	movwf	??_adc_read& (0+255),c
  3014  001046  0E62               	movlw	98
  3015  001048                     u767:
  3016  001048  2EE8               	decfsz	wreg,f,c
  3017  00104A  D7FE               	bra	u767
  3018  00104C  2E03               	decfsz	??_adc_read& (0+255),f,c
  3019  00104E  D7FC               	bra	u767
  3020  001050  D000               	nop2	
  3021                           
  3022                           ;adc45k22.h: 19: ADCON0bits.GO = 1;
  3023  001052  82C2               	bsf	4034,1,c	;volatile
  3024  001054                     l177:
  3025  001054  B2C2               	btfsc	4034,1,c	;volatile
  3026  001056  D7FE               	goto	l177
  3027                           
  3028                           ;adc45k22.h: 21: ADON = 0;
  3029  001058  90C2               	bcf	4034,0,c	;volatile
  3030                           
  3031                           ;adc45k22.h: 22: return(ADRES);
  3032  00105A  CFC3 F001          	movff	4035,?_adc_read	;volatile
  3033  00105E  CFC4 F002          	movff	4036,?_adc_read+1	;volatile
  3034  001062  0012               	return		;funcret
  3035  001064                     __end_of_adc_read:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           prodh	equ	0xFF4
  3042                           prodl	equ	0xFF3
  3043                           wreg	equ	0xFE8
  3044                           indf2	equ	0xFDF
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function _adc_init *****************
  3050 ;; Defined at:
  3051 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\include\Custom_Headers/adc45k22.h"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;		None
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;		None
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  1    wreg      void 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3065 ;;      Params:         0       0       0       0       0       0       0
  3066 ;;      Locals:         0       0       0       0       0       0       0
  3067 ;;      Temps:          0       0       0       0       0       0       0
  3068 ;;      Totals:         0       0       0       0       0       0       0
  3069 ;;Total ram usage:        0 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; This function calls:
  3072 ;;		Nothing
  3073 ;; This function is called by:
  3074 ;;		_main
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text15
  3079  00117E                     __ptext15:
  3080                           	opt stack 0
  3081  00117E                     _adc_init:
  3082                           	opt stack 30
  3083                           
  3084                           ;adc45k22.h: 7: ADCON1 = 0x00;
  3085                           
  3086                           ;incstack = 0
  3087  00117E  0E00               	movlw	0
  3088  001180  6EC1               	movwf	4033,c	;volatile
  3089                           
  3090                           ;adc45k22.h: 8: ADCON2 = 0x8A;
  3091  001182  0E8A               	movlw	138
  3092  001184  6EC0               	movwf	4032,c	;volatile
  3093  001186  0012               	return		;funcret
  3094  001188                     __end_of_adc_init:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           prodh	equ	0xFF4
  3101                           prodl	equ	0xFF3
  3102                           wreg	equ	0xFE8
  3103                           indf2	equ	0xFDF
  3104                           fsr2h	equ	0xFDA
  3105                           fsr2l	equ	0xFD9
  3106                           status	equ	0xFD8
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           prodh	equ	0xFF4
  3112                           prodl	equ	0xFF3
  3113                           wreg	equ	0xFE8
  3114                           indf2	equ	0xFDF
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119                           	psect	rparam
  3120  0000                     tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           prodh	equ	0xFF4
  3125                           prodl	equ	0xFF3
  3126                           wreg	equ	0xFE8
  3127                           indf2	equ	0xFDF
  3128                           fsr2h	equ	0xFDA
  3129                           fsr2l	equ	0xFD9
  3130                           status	equ	0xFD8


Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     37      37
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    glcd_string@str	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_glcd_num
    _glcd_string->_glcd_text
    _glcd_num->___lwdiv
    _glcd_text->_glcd_write
    _glcd_clear->_glcd_clear_line
    _glcd_clear_line->_goto_xy
    _goto_xy->_goto_col
    _goto_xy->_goto_row

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    3341
                                             29 COMRAM     8     8      0
                           _adc_init
                           _adc_read
                         _glcd_clear
                           _glcd_num
                            _glcd_on
                        _glcd_string
                            _goto_xy
 ---------------------------------------------------------------------------------
 (1) _glcd_string                                          5     3      2     312
                                              2 COMRAM     5     3      2
                          _glcd_text
 ---------------------------------------------------------------------------------
 (1) _glcd_on                                              0     0      0       0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (1) _glcd_num                                            22    20      2    1165
                                              7 COMRAM    22    20      2
                            ___lwdiv
                            ___lwmod
                          _glcd_text
 ---------------------------------------------------------------------------------
 (2) _glcd_text                                            1     1      0      30
                                              1 COMRAM     1     1      0
                         _glcd_write
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     290
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _glcd_clear                                           2     2      0     962
                                              7 COMRAM     2     2      0
                    _glcd_clear_line
 ---------------------------------------------------------------------------------
 (2) _glcd_clear_line                                      3     3      0     894
                                              4 COMRAM     3     3      0
                         _glcd_write
                            _goto_xy
 ---------------------------------------------------------------------------------
 (1) _goto_xy                                              2     1      1     789
                                              2 COMRAM     2     1      1
                           _goto_col
                           _goto_row
 ---------------------------------------------------------------------------------
 (2) _goto_row                                             2     2      0      30
                                              0 COMRAM     2     2      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (2) _goto_col                                             2     2      0      75
                                              0 COMRAM     2     2      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (3) _glcd_write                                           1     1      0      15
                                              0 COMRAM     1     1      0
                       _enable_pulse
 ---------------------------------------------------------------------------------
 (3) _enable_pulse                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_read                                             4     2      2      44
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc_init
   _adc_read
   _glcd_clear
     _glcd_clear_line
       _glcd_write
         _enable_pulse
       _goto_xy
         _goto_col
           _enable_pulse
         _goto_row
           _enable_pulse
   _glcd_num
     ___lwdiv
     ___lwmod
     _glcd_text
       _glcd_write
         _enable_pulse
   _glcd_on
     _enable_pulse
   _glcd_string
     _glcd_text
       _glcd_write
         _enable_pulse
   _goto_xy
     _goto_col
       _enable_pulse
     _goto_row
       _enable_pulse

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     25      25       1       38.9%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
ABS                  0      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BIGRAM             5FF      0       0      16        0.0%
DATA                 0      0       0      17        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Jun 17 12:38:45 2017

             glcd_num@num 0008  __size_of_glcd_clear_line 003E                        l38 10B8  
                      l54 10A0                        l39 10C2                        l59 111C  
            __CFG_CP0$OFF 000000              __CFG_CP1$OFF 000000              __CFG_CP2$OFF 000000  
            __CFG_CP3$OFF 000000                       l182 0DB4                       l177 1054  
                     l901 0616                       l911 06F2                       l903 0642  
                     l921 07CE                       l913 071E                       l905 066E  
                     l931 08AA                       l923 07FA                       l915 074A  
                     l907 069A                       l588 0FD6                       l941 0986  
                     l933 08D6                       l925 0826                       l917 0776  
                     l909 06C6                       l598 1018                       l951 0A62  
                     l943 09B2                       l935 0902                       l927 0852  
                     l919 07A2                       l961 0B3E                       l953 0A8E  
                     l945 09DE                       l937 092E                       l929 087E  
                     l971 0C1A                       l963 0B6A                       l955 0ABA  
                     l947 0A0A                       l939 095A                       l973 0C46  
                     l965 0B96                       l957 0AE6                       l949 0A36  
                     l975 0C66                       l967 0BC2                       l959 0B12  
                     l983 0CB4                       l977 0C86                       l969 0BEE  
                     l979 0C8E              __CFG_CPB$OFF 000000              __CFG_CPD$OFF 000000  
                     u727 0E70                       u737 1142                       u747 1152  
                     u757 115C                       u767 1048                       prod 000FF3  
                     wreg 000FE8              glcd_string@i 0007              __CFG_LVP$OFF 000000  
                    l1313 100E                      l1305 0FEE                      l1307 0FF6  
                    l1331 0E88                      l1309 0FFA                      l1341 0EA8  
                    l1255 1084                      l1319 1104                      l1335 0E90  
                    l1353 0F18                      l1259 1094                      l1347 0EEE  
                    l1285 0FA4                      l1365 0F40                      l1439 1034  
                    l1287 0FAC                      l1297 0FCC                      l1289 0FB0  
                    l1369 0F66                      _ADON 007E10                      STR_1 0601  
                    STR_2 0606                      STR_3 060B             glcd_text@text 0002  
                    _main 0DA8                      indf2 000FDF                      fsr2l 000FD9  
           __CFG_BORV$190 000000                      prodh 000FF4                      prodl 000FF3  
                    start 0000            glcd_num@number 000C             __CFG_IESO$OFF 000000  
            ___param_bank 000000                     ?_main 0001                     _ADRES 000FC3  
         __end_of___lwdiv 0FE0           __end_of___lwmod 1022                     _PORTB 000F81  
                   _PORTD 000F83                     _TRISB 000F93                     _TRISD 000F95  
           __CFG_WRT0$OFF 000000             __CFG_WRT1$OFF 000000             __CFG_WRT2$OFF 000000  
           __CFG_WRT3$OFF 000000            __CFG_EBTR0$OFF 000000            __CFG_FCMEN$OFF 000000  
          __CFG_EBTR1$OFF 000000            __CFG_EBTR2$OFF 000000            __CFG_EBTR3$OFF 000000  
         __end_of_glcd_on 10FC             __CFG_WRTB$OFF 000000             __CFG_WRTC$OFF 000000  
           __CFG_WRTD$OFF 000000            __CFG_EBTRB$OFF 000000           __end_of_goto_xy 1174  
      __CFG_MCLRE$EXTMCLR 000000                     main@x 0020                     main@y 0022  
                   main@z 0024            __CFG_BOREN$OFF 000000                     tablat 000FF5  
                   status 000FD8            __CFG_FOSC$HSMP 000000           __initialization 1174  
            __end_of_main 0E80            glcd_string@str 0003            glcd_write@data 0001  
                  ??_main 001E             __activetblptr 000002      __end_of_enable_pulse 1164  
       ??_glcd_clear_line 0005                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0          __end_of_adc_init 1188          __end_of_adc_read 1064  
          __CFG_WDTEN$OFF 000000            __CFG_XINST$OFF 000000          __end_of_glcd_num 0F3A  
    __size_of_glcd_string 0054                 ??___lwdiv 0005                 ??___lwmod 0005  
        __end_of_goto_col 10D4          __end_of_goto_row 1136                 ??_glcd_on 0001  
               ??_goto_xy 0004              __mediumconst 0000               goto_col@col 0002  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
         __CFG_HFOFST$OFF 000000                __accesstop 0060   __end_of__initialization 1174  
         __CFG_PBADEN$OFF 000000               goto_row@row 0001             ___rparam_used 000001  
          __pcstackCOMRAM 0001        __size_of_glcd_text 0796           __CFG_PLLCFG$OFF 000000  
      __CFG_CCP2MX$PORTC1 000000        __CFG_CCP3MX$PORTB5 000000     __size_of_enable_pulse 0016  
               ?_adc_init 0001                 ?_adc_read 0001                _glcd_clear 10FC  
              _glcd_write 1136         __CFG_PRICLKEN$OFF 000000                 ?_glcd_num 0008  
        goto_col@Col_Data 0001                 ?_goto_col 0001                 ?_goto_row 0001  
         __CFG_PWRTEN$OFF 000000              _enable_pulse 114E                   __Hparam 0000  
                 __Lparam 0000         __end_of_glcd_text 0DA8           _glcd_clear_line 1064  
                 ___lwdiv 0F8E                   ___lwmod 0FE0              __psmallconst 0600  
         __CFG_STVREN$OFF 000000                   __pcinit 1174                   __ramtop 0600  
              ??_adc_init 0001                ??_adc_read 0003                   __ptext0 0DA8  
                 __ptext1 0F3A                   __ptext2 10D4                   __ptext3 0E80  
                 __ptext4 0612                   __ptext5 0FE0                   __ptext6 0F8E  
                 __ptext7 10FC                   __ptext8 1064                   __ptext9 1164  
                 _glcd_on 10D4                   _goto_xy 1164                ??_glcd_num 000A  
    end_of_initialization 1174             __Lmediumconst 0000                ??_goto_col 0001  
              ??_goto_row 0001                 _PORTBbits 000F81               ?_glcd_clear 0001  
             ?_glcd_write 0001   __end_of_glcd_clear_line 10A2             ??_glcd_string 0005  
       glcd_clear_line@ln 0005       start_initialization 1174       __size_of_glcd_clear 0022  
     __size_of_glcd_write 0018       __end_of_glcd_string 0F8E         __size_of_adc_init 000A  
       __size_of_adc_read 0042           adc_read@channel 0004         __size_of_glcd_num 00BA  
        ?_glcd_clear_line 0001         __size_of_goto_col 0032          ___lwdiv@dividend 0001  
       __size_of_goto_row 0018                  ?___lwdiv 0001                  ?___lwmod 0001  
               _glcd_text 0612                  ?_glcd_on 0001               __smallconst 0600  
                ?_goto_xy 0003          ___lwdiv@quotient 0005               _glcd_string 0F3A  
        __CFG_WDTPS$32768 000000                ?_glcd_text 0001                 glcd_num@i 001C  
               glcd_num@j 001D                _ADCON0bits 000FC2              ??_glcd_clear 0008  
            ??_glcd_write 0001          glcd_clear_line@i 0006                  __Hrparam 0000  
      __end_of_glcd_clear 111E                  __Lrparam 0000        __end_of_glcd_write 114E  
       __CFG_P2BMX$PORTC0 000000          __size_of___lwdiv 0052          __size_of___lwmod 0042  
                _adc_init 117E                  _adc_read 1022          __size_of_glcd_on 0028  
        __size_of_goto_xy 0010           ___lwdiv@divisor 0003           ___lwdiv@counter 0007  
                __ptext10 111E                  __ptext11 10A2                  __ptext12 1136  
                __ptext13 114E                  __ptext14 1022                  __ptext15 117E  
                _glcd_num 0E80             __size_of_main 00D8                  _goto_col 10A2  
                _goto_row 111E               ??_glcd_text 0002                  goto_xy@x 0004  
                goto_xy@y 0003          ___lwmod@dividend 0001             ?_enable_pulse 0001  
         ___lwmod@divisor 0003           ___lwmod@counter 0005         __CFG_T3CMX$PORTC0 000000  
        goto_row@Col_Data 0002            ??_enable_pulse 0001              ?_glcd_string 0003  
             glcd_clear@m 0008  
